<asdoc build="asd3_0_b2_1">
   <link rel="stylesheet" href="style.css" type="text/css"/>
   <packages>
      <asPackage name="com.universalmind.cairngorm.events">
         <classes>
            <asClass name="UMEvent" type="class" fullname="com.universalmind.cairngorm.events:UMEvent" accessLevel="public" isFinal="false" isDynamic="false" packageName="com.universalmind.cairngorm.events" path="" relativePath="../" href="" taghref="" inheritDoc="false">
               <description><![CDATA[
    The UMEvent class is used to differentiate Cairngorm events 
    from events raised by the underlying Flex framework (or even the standard CairngormEvent)
    It is mandatory to use UMEvent for dispatching to Commands. Commands
    understand and "use" the optional "handlers" responder within the event 
    
    <p>For more information on how event dispatching works in Cairngorm, 
    please check with CairngormEventDispatcher.</p>
        <p>For more information on how event dispatching works uniquely with Commands, 
    please check with Command.</p>
        <p>
    Events are typically broadcast as the result of a user gesture occuring
    in the application, such as a button click, a menu selection, a double
    click, a drag and drop operation, etc.  
    </p>
        ]]></description>
               <shortDescription><![CDATA[
    The UMEvent class is used to differentiate Cairngorm events 
    from events raised by the underlying Flex framework (or even the standard CairngormEvent)
    It is mandatory to use UMEvent for dispatching to Commands.]]></shortDescription>
               <versions/>
               <author/>
               <sees>
                  <see href="" label="com.universalmind.cairngorm.controller.CairngormEventDispatcher"/>
                  <see href="../commands/Command.html" label="com.universalmind.cairngorm.commands.Command"/>
               </sees>
               <asDecendants>
                  <classRef name="AnnounceFaultEvent" fullName="com.universalmind.cairngorm.events:AnnounceFaultEvent" packageName="com.universalmind.cairngorm.events" relativePath="../events/AnnounceFaultEvent.html"/>
               </asDecendants>
               <asAncestors>
                  <asAncestor>
                     <classRef name="CairngormEvent" fullName="com.adobe.cairngorm.control:CairngormEvent" packageName="com.adobe.cairngorm.control" relativePath="../../../adobe/cairngorm/control/CairngormEvent.html"/>
                     <fields>
                        <field name="data" fullname="com.adobe.cairngorm.control:CairngormEvent/data" accessLevel="public" type="" isConst="false" isStatic="false">
                           <shortDescription><![CDATA[
       The data property can be used to hold information to be passed with the event
       in cases where the developer does not want to extend the CairngormEvent class.]]></shortDescription>
                        </field>
                     </fields>
                  </asAncestor>
                  <asAncestor>
                     <classRef name="flash.events.Event" fullName="flash.events.Event" relativePath="none"/>
                  </asAncestor>
               </asAncestors>
               <asImplements>
                  <asAncestor>
                     <classRef name="com.universalmind.cairngorm.events.IUMEvent" fullName="com.universalmind.cairngorm.events.IUMEvent" relativePath="none"/>
                  </asAncestor>
               </asImplements>
               <constructors>
                  <constructor name="UMEvent" fullname="com.universalmind.cairngorm.events:UMEvent/UMEvent" accessLevel="public" result_type="*" inheritDoc="false">
                     <description><![CDATA[
        Constructor, takes the event name (type), Responder proxy to allow caller to be notified,
        data object (defaults to null), and also defaults the standard Flex event properties bubbles and cancelable
        to true and false respectively.
        
        ]]></description>
                     <shortDescription><![CDATA[
        Constructor, takes the event name (type), Responder proxy to allow caller to be notified,
        data object (defaults to null), and also defaults the standard Flex event properties bubbles and cancelable
        to true and false respectively.]]></shortDescription>
                     <versions/>
                     <result type="*"/>
                     <params>
                        <param name="eventType" type="String" default="com.universalmind.cairngorm.events.UMEvent">
                           <description><![CDATA[ This is the signature or type of event
        ]]></description>
                        </param>
                        <param name="handlers" type="com.universalmind.cairngorm.events:Callbacks" default="null">
                           <classRef name="Callbacks" fullName="com.universalmind.cairngorm.events:Callbacks" packageName="com.universalmind.cairngorm.events" relativePath="Callbacks.html"/>
                           <description><![CDATA[  This is the "responder" proxy that allows notifications/callbacks to the original caller
        ]]></description>
                        </param>
                        <param name="bubbles" type="Boolean" default="true">
                           <description><![CDATA[   This flag indicates if the event should "bubble". [default = true]
        ]]></description>
                        </param>
                        <param name="cancelable" type="Boolean" default="false">
                           <description><![CDATA[This flag indicates if the event can be cancelled. [default = false]
        ]]></description>
                        </param>
                        <param name="data" type="" default="null"/>
                     </params>
                     <customs>
                        <parma><![CDATA[data       This is the optional data object that can be packaged with the event without creating an event subclass
        ]]></parma>
                     </customs>
                  </constructor>
               </constructors>
               <methods>
                  <method name="clone" fullname="com.universalmind.cairngorm.events:UMEvent/clone" accessLevel="public" result_type="flash.events:Event" isFinal="false" isOverride="true" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
     Per Adobe Flex recommendations all events should support a clone() operation for bubbling and dispatching purposes
     
     ]]></description>
                     <shortDescription><![CDATA[
     Per Adobe Flex recommendations all events should support a clone() operation for bubbling and dispatching purposes
     
     ]]></shortDescription>
                     <versions/>
                     <result type="flash.events:Event"/>
                  </method>
                  <method name="copyFrom" fullname="com.universalmind.cairngorm.events:UMEvent/copyFrom" accessLevel="public" result_type="flash.events:Event" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
     Utility method to allow quick initialization of an event based on current settings from another event. 
     Also used to implement the clone() method functionality
     
     ]]></description>
                     <shortDescription><![CDATA[
     Utility method to allow quick initialization of an event based on current settings from another event.]]></shortDescription>
                     <versions/>
                     <result type="flash.events:Event"/>
                     <params>
                        <param name="src" type="flash.events:Event">
                           <description><![CDATA[The event from which current settings and references should be copied.
     ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="dispatch" fullname="com.universalmind.cairngorm.events:UMEvent/dispatch" accessLevel="public" result_type="Boolean" isFinal="false" isOverride="true" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
       <p><strong>Deprecated, Do not use! The default UMEvent bubbling and FrontController event hooks obviate this method.</strong></p>
       This method also completely distorts the event structures within Flex... no other events in Flex can dispatch themselves.
       Events are "announcements" with optional data packaged in the announcement. Events are passive. NOT active.
        
       Dispatch this event via the Cairngorm event dispatcher.
       ]]></description>
                     <shortDescription><![CDATA[
       <p><strong>Deprecated, Do not use! The default UMEvent bubbling and FrontController event hooks obviate this method.</strong></p>
       This method also completely distorts the event structures within Flex...]]></shortDescription>
                     <versions/>
                     <result type="Boolean"/>
                  </method>
               </methods>
               <fields>
                  <field name="callbacks" fullname="com.universalmind.cairngorm.events:UMEvent/callbacks" accessLevel="public" type="com.universalmind.cairngorm.events:Callbacks" isConst="false" isStatic="false" defaultValue="null">
                     <classRef name="Callbacks" fullName="com.universalmind.cairngorm.events:Callbacks" packageName="com.universalmind.cairngorm.events" relativePath="../events/Callbacks.html"/>
                     <description><![CDATA[
        The data property can be used to hold information to be passed with the event
        in cases where the developer does not want to extend the UMEvent class.
        However, it is recommended that specific classes are created for each type
        of event to be dispatched.
        ]]></description>
                     <shortDescription><![CDATA[
        The data property can be used to hold information to be passed with the event
        in cases where the developer does not want to extend the UMEvent class.]]></shortDescription>
                     <versions/>
                  </field>
               </fields>
            </asClass>
            <asClass name="AnnounceFaultEvent" type="class" fullname="com.universalmind.cairngorm.events:AnnounceFaultEvent" accessLevel="public" isFinal="false" isDynamic="false" packageName="com.universalmind.cairngorm.events" path="" relativePath="../" href="" taghref="" inheritDoc="false">
               <description><![CDATA[
    The UMEvent class is used to differentiate Cairngorm events 
    from events raised by the underlying Flex framework (or even the standard CairngormEvent)
    It is mandatory to use UMEvent for dispatching to Commands. Commands
    understand and "use" the optional "handlers" responder within the event 
    
    <p>For more information on how event dispatching works in Cairngorm, 
    please check with CairngormEventDispatcher.</p>
        <p>For more information on how event dispatching works uniquely with Commands, 
    please check with Command.</p>
        <p>
    Events are typically broadcast as the result of a user gesture occuring
    in the application, such as a button click, a menu selection, a double
    click, a drag and drop operation, etc.  
    </p>
        ]]></description>
               <shortDescription><![CDATA[
    The UMEvent class is used to differentiate Cairngorm events 
    from events raised by the underlying Flex framework (or even the standard CairngormEvent)
    It is mandatory to use UMEvent for dispatching to Commands.]]></shortDescription>
               <versions/>
               <author/>
               <sees>
                  <see href="" label="com.universalmind.cairngorm.controller.CairngormEventDispatcher"/>
                  <see href="../commands/Command.html" label="com.universalmind.cairngorm.commands.Command"/>
               </sees>
               <asAncestors>
                  <asAncestor>
                     <classRef name="UMEvent" fullName="com.universalmind.cairngorm.events:UMEvent" packageName="com.universalmind.cairngorm.events" relativePath="UMEvent.html"/>
                     <fields>
                        <field name="callbacks" fullname="com.universalmind.cairngorm.events:UMEvent/callbacks" accessLevel="public" type="com.universalmind.cairngorm.events:Callbacks" isConst="false" isStatic="false" defaultValue="null">
                           <shortDescription><![CDATA[
        The data property can be used to hold information to be passed with the event
        in cases where the developer does not want to extend the UMEvent class.]]></shortDescription>
                           <classRef name="Callbacks" fullName="com.universalmind.cairngorm.events:Callbacks" packageName="com.universalmind.cairngorm.events" relativePath="../events/Callbacks.html"/>
                        </field>
                     </fields>
                     <methods>
                        <method name="dispatch" fullname="com.universalmind.cairngorm.events:UMEvent/dispatch" accessLevel="public" result_type="Boolean" isFinal="false" isOverride="true" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
       <p><strong>Deprecated, Do not use! The default UMEvent bubbling and FrontController event hooks obviate this method.</strong></p>
       This method also completely distorts the event structures within Flex...]]></shortDescription>
                        </method>
                     </methods>
                  </asAncestor>
                  <asAncestor>
                     <classRef name="CairngormEvent" fullName="com.adobe.cairngorm.control:CairngormEvent" packageName="com.adobe.cairngorm.control" relativePath="../../../adobe/cairngorm/control/CairngormEvent.html"/>
                     <fields>
                        <field name="data" fullname="com.adobe.cairngorm.control:CairngormEvent/data" accessLevel="public" type="" isConst="false" isStatic="false">
                           <shortDescription><![CDATA[
       The data property can be used to hold information to be passed with the event
       in cases where the developer does not want to extend the CairngormEvent class.]]></shortDescription>
                        </field>
                     </fields>
                  </asAncestor>
                  <asAncestor>
                     <classRef name="flash.events.Event" fullName="flash.events.Event" relativePath="none"/>
                  </asAncestor>
               </asAncestors>
               <constructors>
                  <constructor name="AnnounceFaultEvent" fullname="com.universalmind.cairngorm.events:AnnounceFaultEvent/AnnounceFaultEvent" accessLevel="public" result_type="*" inheritDoc="false">
                     <description><![CDATA[
        Constructor, takes the fault data that should be deliver with the event
        
        ]]></description>
                     <shortDescription><![CDATA[
        Constructor, takes the fault data that should be deliver with the event
        
        ]]></shortDescription>
                     <versions/>
                     <result type="*"/>
                     <params>
                        <param name="fault" type="mx.rpc:Fault">
                           <description><![CDATA[ This is the actual Fault instance [usually generated by an asynchronous response FaultEvent]
        ]]></description>
                        </param>
                     </params>
                  </constructor>
               </constructors>
               <methods>
                  <method name="clone" fullname="com.universalmind.cairngorm.events:AnnounceFaultEvent/clone" accessLevel="public" result_type="flash.events:Event" isFinal="false" isOverride="true" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
     Per Adobe Flex recommendations all events should support a clone() operation for bubbling and dispatching purposes
     
     ]]></description>
                     <shortDescription><![CDATA[
     Per Adobe Flex recommendations all events should support a clone() operation for bubbling and dispatching purposes
     
     ]]></shortDescription>
                     <versions/>
                     <result type="flash.events:Event"/>
                  </method>
                  <method name="copyFrom" fullname="com.universalmind.cairngorm.events:AnnounceFaultEvent/copyFrom" accessLevel="public" result_type="flash.events:Event" isFinal="false" isOverride="true" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
     Utility method to allow quick initialization of an event based on current settings from another event. 
     Also used to implement the clone() method functionality
     
     ]]></description>
                     <shortDescription><![CDATA[
     Utility method to allow quick initialization of an event based on current settings from another event.]]></shortDescription>
                     <versions/>
                     <result type="flash.events:Event"/>
                     <params>
                        <param name="src" type="flash.events:Event">
                           <description><![CDATA[The event from which current settings and references should be copied.
     ]]></description>
                        </param>
                     </params>
                  </method>
               </methods>
               <fields>
                  <field name="EVENT_ID" fullname="com.universalmind.cairngorm.events:AnnounceFaultEvent/EVENT_ID" accessLevel="public" type="String" isConst="true" isStatic="true" defaultValue="announceFaultEvent">
                     <versions/>
                  </field>
                  <field name="fault" fullname="com.universalmind.cairngorm.events:AnnounceFaultEvent/fault" accessLevel="public" type="mx.rpc:Fault" isConst="false" isStatic="false" defaultValue="null">
                     <description><![CDATA[
        The fault data that was generated during an asynchronous response or manually.
        ]]></description>
                     <shortDescription><![CDATA[
        The fault data that was generated during an asynchronous response or manually.]]></shortDescription>
                     <versions/>
                  </field>
               </fields>
            </asClass>
            <asClass name="Callbacks" type="class" fullname="com.universalmind.cairngorm.events:Callbacks" accessLevel="public" isFinal="false" isDynamic="false" packageName="com.universalmind.cairngorm.events" path="" relativePath="../" href="" taghref="" inheritDoc="false">
               <description><![CDATA[
   This class is a superset of mx.rpc.Responder that
   allows developers to quickly create a responder with only a resultHandler
   or result, fault, and conflict handlers. 
   ]]></description>
               <shortDescription><![CDATA[
   This class is a superset of mx.rpc.Responder that
   allows developers to quickly create a responder with only a resultHandler
   or result, fault, and conflict handlers.]]></shortDescription>
               <versions/>
               <author/>
               <asAncestors/>
               <asImplements>
                  <asAncestor>
                     <classRef name="mx.rpc.IResponder" fullName="mx.rpc.IResponder" relativePath="none"/>
                  </asAncestor>
               </asImplements>
               <constructors>
                  <constructor name="Callbacks" fullname="com.universalmind.cairngorm.events:Callbacks/Callbacks" accessLevel="public" result_type="*" inheritDoc="false">
                     <description><![CDATA[
     Constructor that allows users to specify result, fault, and conflict handlers.
     
     ]]></description>
                     <shortDescription><![CDATA[
     Constructor that allows users to specify result, fault, and conflict handlers.]]></shortDescription>
                     <versions/>
                     <result type="*"/>
                     <params>
                        <param name="resultFunc" type="Function"/>
                        <param name="faultFunc" type="Function" default="null"/>
                        <param name="conflictFunc" type="Function" default="null"/>
                        <param name="priority" type="int" default="unknown"/>
                     </params>
                     <customs>
                        <resultFunc><![CDATA[ The function that should be invoked as the resultHandler for a response
     ]]></resultFunc>
                        <faultFunc><![CDATA[  The function that should be invoked as the faultHandler for a response
     ]]></faultFunc>
                        <conflicFunc><![CDATA[The function that should be invoked as the conflictHandler for a response
     ]]></conflicFunc>
                     </customs>
                  </constructor>
               </constructors>
               <methods>
                  <method name="result" fullname="com.universalmind.cairngorm.events:Callbacks/result" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[ Required method to support the IResponder interface ]]></description>
                     <shortDescription><![CDATA[ Required method to support the IResponder interface ]]></shortDescription>
                     <versions/>
                     <result type="void"/>
                     <params>
                        <param name="info" type="Object"/>
                     </params>
                  </method>
                  <method name="fault" fullname="com.universalmind.cairngorm.events:Callbacks/fault" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[ Required method to support the IResponder interface ]]></description>
                     <shortDescription><![CDATA[ Required method to support the IResponder interface ]]></shortDescription>
                     <versions/>
                     <result type="void"/>
                     <params>
                        <param name="info" type="Object"/>
                     </params>
                  </method>
               </methods>
               <fields>
                  <field name="PRIORITY_BEFORE" fullname="com.universalmind.cairngorm.events:Callbacks/PRIORITY_BEFORE" accessLevel="public" type="int" isConst="true" isStatic="true" defaultValue="0">
                     <versions/>
                  </field>
                  <field name="PRIORITY_AFTER" fullname="com.universalmind.cairngorm.events:Callbacks/PRIORITY_AFTER" accessLevel="public" type="int" isConst="true" isStatic="true" defaultValue="1">
                     <versions/>
                  </field>
                  <field name="PRIORITY_OVERRIDE" fullname="com.universalmind.cairngorm.events:Callbacks/PRIORITY_OVERRIDE" accessLevel="public" type="int" isConst="true" isStatic="true" defaultValue="2">
                     <versions/>
                  </field>
                  <field name="resultHandler" fullname="com.universalmind.cairngorm.events:Callbacks/resultHandler" accessLevel="public" type="Function" isConst="false" isStatic="false">
                     <description><![CDATA[ Result handler function ]]></description>
                     <shortDescription><![CDATA[ Result handler function ]]></shortDescription>
                     <versions/>
                  </field>
                  <field name="faultHandler" fullname="com.universalmind.cairngorm.events:Callbacks/faultHandler" accessLevel="public" type="Function" isConst="false" isStatic="false">
                     <description><![CDATA[ Fault handler function ]]></description>
                     <shortDescription><![CDATA[ Fault handler function ]]></shortDescription>
                     <versions/>
                  </field>
                  <field name="conflictHandler" fullname="com.universalmind.cairngorm.events:Callbacks/conflictHandler" accessLevel="public" type="Function" isConst="false" isStatic="false">
                     <description><![CDATA[ Conflict handler function ]]></description>
                     <shortDescription><![CDATA[ Conflict handler function ]]></shortDescription>
                     <versions/>
                  </field>
                  <field name="priority" fullname="com.universalmind.cairngorm.events:Callbacks/priority" accessLevel="public" type="int" isConst="false" isStatic="false">
                     <description><![CDATA[ Priority of these callbacks over OTHER potential callbacks also registered ]]></description>
                     <shortDescription><![CDATA[ Priority of these callbacks over OTHER potential callbacks also registered ]]></shortDescription>
                     <versions/>
                  </field>
               </fields>
            </asClass>
         </classes>
      </asPackage>
      <asPackage name="com.adobe.cairngorm.business">
         <classes>
            <asClass name="ServiceLocator" type="class" fullname="com.adobe.cairngorm.business:ServiceLocator" accessLevel="public" isFinal="false" isDynamic="false" packageName="com.adobe.cairngorm.business" path="" relativePath="../" href="" taghref="" inheritDoc="false">
               <description><![CDATA[
    The ServiceLocator allows service to be located and security
    credentials to be managed.
    
    Although credentials are set against a service they apply to the channel
    i.e. the set of services belonging to the channel share the same
    credentials.
    
    You must always make sure you call logout at the end of the user's
    session.
    ]]></description>
               <shortDescription><![CDATA[
    The ServiceLocator allows service to be located and security
    credentials to be managed.]]></shortDescription>
               <versions/>
               <author/>
               <asDecendants>
                  <classRef name="ServiceLocator" fullName="com.universalmind.cairngorm.business:ServiceLocator" packageName="com.universalmind.cairngorm.business" relativePath="../../../universalmind/cairngorm/business/ServiceLocator.html"/>
               </asDecendants>
               <asAncestors/>
               <asImplements>
                  <asAncestor>
                     <classRef name="com.adobe.cairngorm.business.IServiceLocator" fullName="com.adobe.cairngorm.business.IServiceLocator" relativePath="none"/>
                  </asAncestor>
               </asImplements>
               <constructors>
                  <constructor name="ServiceLocator" fullname="com.adobe.cairngorm.business:ServiceLocator/ServiceLocator" accessLevel="public" result_type="*" inheritDoc="false">
                     <versions/>
                     <result type="*"/>
                  </constructor>
               </constructors>
               <methods>
                  <method name="getInstance" fullname="com.adobe.cairngorm.business:ServiceLocator/getInstance" accessLevel="public" result_type="com.adobe.cairngorm.business:ServiceLocator" isFinal="false" isOverride="false" isStatic="true" inheritDoc="false">
                     <description><![CDATA[
       Return the ServiceLocator __instance.
       ]]></description>
                     <shortDescription><![CDATA[
       Return the ServiceLocator __instance.]]></shortDescription>
                     <versions/>
                     <result type="com.adobe.cairngorm.business:ServiceLocator">
                        <![CDATA[the __instance.
       ]]>
                        <classRef name="ServiceLocator" fullName="com.adobe.cairngorm.business:ServiceLocator" packageName="com.adobe.cairngorm.business" relativePath="../business/ServiceLocator.html"/>
                     </result>
                  </method>
                  <method name="getHTTPService" fullname="com.adobe.cairngorm.business:ServiceLocator/getHTTPService" accessLevel="public" result_type="mx.rpc.http:HTTPService" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
       Return the HTTPService for the given name.
       ]]></description>
                     <shortDescription><![CDATA[
       Return the HTTPService for the given name.]]></shortDescription>
                     <versions/>
                     <result type="mx.rpc.http:HTTPService"><![CDATA[the HTTPService.
       ]]></result>
                     <params>
                        <param name="name" type="String">
                           <description><![CDATA[the name of the HTTPService
       ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="getRemoteObject" fullname="com.adobe.cairngorm.business:ServiceLocator/getRemoteObject" accessLevel="public" result_type="mx.rpc.remoting:RemoteObject" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
       Return the RemoteObject for the given name.
       ]]></description>
                     <shortDescription><![CDATA[
       Return the RemoteObject for the given name.]]></shortDescription>
                     <versions/>
                     <result type="mx.rpc.remoting:RemoteObject"><![CDATA[the RemoteObject.
       ]]></result>
                     <params>
                        <param name="name" type="String">
                           <description><![CDATA[the name of the RemoteObject.
       ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="getWebService" fullname="com.adobe.cairngorm.business:ServiceLocator/getWebService" accessLevel="public" result_type="mx.rpc.soap:WebService" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
       Return the WebService for the given name.
       ]]></description>
                     <shortDescription><![CDATA[
       Return the WebService for the given name.]]></shortDescription>
                     <versions/>
                     <result type="mx.rpc.soap:WebService"><![CDATA[the WebService.
       ]]></result>
                     <params>
                        <param name="name" type="String">
                           <description><![CDATA[the name of the WebService.
       ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="setCredentials" fullname="com.adobe.cairngorm.business:ServiceLocator/setCredentials" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
       Set the credentials for all registered services.
       ]]></description>
                     <shortDescription><![CDATA[
       Set the credentials for all registered services.]]></shortDescription>
                     <versions/>
                     <result type="void"/>
                     <params>
                        <param name="username" type="String">
                           <description><![CDATA[the username to set.
       ]]></description>
                        </param>
                        <param name="password" type="String">
                           <description><![CDATA[the password to set.
       ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="setRemoteCredentials" fullname="com.adobe.cairngorm.business:ServiceLocator/setRemoteCredentials" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
       Set the remote credentials for all registered services.
       ]]></description>
                     <shortDescription><![CDATA[
       Set the remote credentials for all registered services.]]></shortDescription>
                     <versions/>
                     <result type="void"/>
                     <params>
                        <param name="username" type="String">
                           <description><![CDATA[the username to set.
       ]]></description>
                        </param>
                        <param name="password" type="String">
                           <description><![CDATA[the password to set.
       ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="logout" fullname="com.adobe.cairngorm.business:ServiceLocator/logout" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
       Logs the user out of all registered services.
       ]]></description>
                     <shortDescription><![CDATA[
       Logs the user out of all registered services.]]></shortDescription>
                     <versions/>
                     <result type="void"/>
                  </method>
               </methods>
               <fields>
                  <field name="__instance" fullname="com.adobe.cairngorm.business:ServiceLocator/protected:__instance" accessLevel="protected" type="com.adobe.cairngorm.business:ServiceLocator" isConst="false" isStatic="true">
                     <classRef name="ServiceLocator" fullName="com.adobe.cairngorm.business:ServiceLocator" packageName="com.adobe.cairngorm.business" relativePath="../business/ServiceLocator.html"/>
                     <versions/>
                  </field>
               </fields>
            </asClass>
            <asClass name="AbstractServices" type="class" fullname="com.adobe.cairngorm.business:AbstractServices" accessLevel="public" isFinal="false" isDynamic="false" packageName="com.adobe.cairngorm.business" path="" relativePath="../" href="" taghref="" inheritDoc="false">
               <description><![CDATA[
    Used to manage all services defined on the IServiceLocator instance.
    ]]></description>
               <shortDescription><![CDATA[
    Used to manage all services defined on the IServiceLocator instance.]]></shortDescription>
               <versions/>
               <author/>
               <asAncestors/>
               <asImplements>
                  <asAncestor>
                     <classRef name="com.adobe.cairngorm.business.IServices" fullName="com.adobe.cairngorm.business.IServices" relativePath="none"/>
                  </asAncestor>
               </asImplements>
               <methods>
                  <method name="register" fullname="com.adobe.cairngorm.business:AbstractServices/register" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
       Register the services.
       ]]></description>
                     <shortDescription><![CDATA[
       Register the services.]]></shortDescription>
                     <versions/>
                     <result type="void"/>
                     <params>
                        <param name="serviceLocator" type="com.adobe.cairngorm.business:IServiceLocator">
                           <description><![CDATA[the IServiceLocator isntance.
       ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="getService" fullname="com.adobe.cairngorm.business:AbstractServices/getService" accessLevel="public" result_type="Object" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
       Return the service with the given name.
       ]]></description>
                     <shortDescription><![CDATA[
       Return the service with the given name.]]></shortDescription>
                     <versions/>
                     <result type="Object"><![CDATA[the service.
       ]]></result>
                     <params>
                        <param name="name" type="String">
                           <description><![CDATA[the name of the service.
       ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="setCredentials" fullname="com.adobe.cairngorm.business:AbstractServices/setCredentials" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
       Set the credentials for all registered services.
       ]]></description>
                     <shortDescription><![CDATA[
       Set the credentials for all registered services.]]></shortDescription>
                     <versions/>
                     <result type="void"/>
                     <params>
                        <param name="username" type="String">
                           <description><![CDATA[the username to set.
       ]]></description>
                        </param>
                        <param name="password" type="String">
                           <description><![CDATA[the password to set.
       ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="setRemoteCredentials" fullname="com.adobe.cairngorm.business:AbstractServices/setRemoteCredentials" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
       Set the remote credentials for all registered services.
       ]]></description>
                     <shortDescription><![CDATA[
       Set the remote credentials for all registered services.]]></shortDescription>
                     <versions/>
                     <result type="void"/>
                     <params>
                        <param name="username" type="String">
                           <description><![CDATA[the username to set.
       ]]></description>
                        </param>
                        <param name="password" type="String">
                           <description><![CDATA[the password to set.
       ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="logout" fullname="com.adobe.cairngorm.business:AbstractServices/logout" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
       Log the user out of all registered services.
       ]]></description>
                     <shortDescription><![CDATA[
       Log the user out of all registered services.]]></shortDescription>
                     <versions/>
                     <result type="void"/>
                  </method>
                  <method name="getAccessors" fullname="com.adobe.cairngorm.business:AbstractServices/protected:getAccessors" accessLevel="protected" result_type="XMLList" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
       Return all the accessors on this object.
       ]]></description>
                     <shortDescription><![CDATA[
       Return all the accessors on this object.]]></shortDescription>
                     <versions/>
                     <result type="XMLList"><![CDATA[this object's accessors.
       ]]></result>
                     <params>
                        <param name="serviceLocator" type="com.adobe.cairngorm.business:IServiceLocator">
                           <description><![CDATA[the IServiceLocator instance.
       ]]></description>
                        </param>
                     </params>
                  </method>
               </methods>
            </asClass>
         </classes>
      </asPackage>
      <asPackage name="com.universalmind.cairngorm.events.generator">
         <classes>
            <asClass name="EventGenerator" type="class" fullname="com.universalmind.cairngorm.events.generator:EventGenerator" accessLevel="public" isFinal="false" isDynamic="false" packageName="com.universalmind.cairngorm.events.generator" path="" relativePath="../" href="" taghref="" inheritDoc="false">
               <versions/>
               <author/>
               <defaultProperty name="events"/>
               <eventsGenerated>
                  <event name="result" owner="com.universalmind.cairngorm.events.generator:EventGenerator">
                     <versions/>
                     <eventObject href="" label="flash.events.Event"/>
                  </event>
                  <event name="fault" owner="com.universalmind.cairngorm.events.generator:EventGenerator">
                     <versions/>
                     <eventObject href="" label="flash.events.Event"/>
                  </event>
               </eventsGenerated>
               <asAncestors>
                  <asAncestor>
                     <classRef name="mx.core.UIComponent" fullName="mx.core.UIComponent" relativePath="none"/>
                  </asAncestor>
               </asAncestors>
               <asImplements>
                  <asAncestor>
                     <classRef name="com.universalmind.cairngorm.events.generator.IEventGenerator" fullName="com.universalmind.cairngorm.events.generator.IEventGenerator" relativePath="none"/>
                  </asAncestor>
               </asImplements>
               <constructors>
                  <constructor name="EventGenerator" fullname="com.universalmind.cairngorm.events.generator:EventGenerator/EventGenerator" accessLevel="public" result_type="*" inheritDoc="false">
                     <versions/>
                     <result type="*"/>
                     <params>
                        <param name="eventsToFire" type="Array" default="null"/>
                        <param name="handlers" type="com.universalmind.cairngorm.events:Callbacks" default="null">
                           <classRef name="Callbacks" fullName="com.universalmind.cairngorm.events:Callbacks" packageName="com.universalmind.cairngorm.events" relativePath="../Callbacks.html"/>
                        </param>
                        <param name="failCount" type="int" default="-1"/>
                        <param name="triggerType" type="String" default="unknown"/>
                     </params>
                  </constructor>
               </constructors>
               <methods>
                  <method name="dispatch" fullname="com.universalmind.cairngorm.events.generator:EventGenerator/dispatch" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <versions/>
                     <result type="void"/>
                     <params>
                        <param name="handlers" type="com.universalmind.cairngorm.events:Callbacks" default="null">
                           <classRef name="Callbacks" fullName="com.universalmind.cairngorm.events:Callbacks" packageName="com.universalmind.cairngorm.events" relativePath="../Callbacks.html"/>
                        </param>
                     </params>
                  </method>
               </methods>
               <fields>
                  <field name="TRIGGER_SEQUENCE" fullname="com.universalmind.cairngorm.events.generator:EventGenerator/TRIGGER_SEQUENCE" accessLevel="public" type="String" isConst="true" isStatic="true" defaultValue="sequence">
                     <versions/>
                  </field>
                  <field name="TRIGGER_PARALLEL" fullname="com.universalmind.cairngorm.events.generator:EventGenerator/TRIGGER_PARALLEL" accessLevel="public" type="String" isConst="true" isStatic="true" defaultValue="parallel">
                     <versions/>
                  </field>
                  <field name="trigger" fullname="com.universalmind.cairngorm.events.generator:EventGenerator/trigger" accessLevel="public" type="String" isConst="false" isStatic="false" defaultValue="sequence">
                     <versions/>
                  </field>
                  <field name="failCount" fullname="com.universalmind.cairngorm.events.generator:EventGenerator/failCount" accessLevel="public" type="int" isConst="false" isStatic="false" defaultValue="-1">
                     <versions/>
                  </field>
                  <field name="events" fullname="com.universalmind.cairngorm.events.generator:EventGenerator/events/set" accessLevel="public" isConst="false" isStatic="false" type="Array" inheritDoc="false" only="write">
                     <versions/>
                  </field>
               </fields>
            </asClass>
         </classes>
      </asPackage>
      <asPackage name="com.adobe.cairngorm.view">
         <classes>
            <asClass name="ViewHelper" type="class" fullname="com.adobe.cairngorm.view:ViewHelper" accessLevel="public" isFinal="false" isDynamic="false" packageName="com.adobe.cairngorm.view" path="" relativePath="../" href="" taghref="" inheritDoc="false">
               <description><![CDATA[
    <p><strong>Deprecated as of Cairngorm 2.1.</strong></p>
    
    Used to isolate command classes from the implementation details of a view.
    
    <p>Model-View-Controller (MVC) best practices specify that command classes 
    should interact with the view using the model (see the ModelLocator class), 
    but, in some instances, command classes may require to both interrogate and 
    update the view directly.  Prior to performing any business logic, the command 
    class may require to fetch values that have been set on the view; following 
    completion of any business logic, the final task may be for a 
    command class to update the View (user interface) with any results returned, 
    or perhaps to switch the View entirely (to a different screen).</p>
        <p>
    By encapsulating all the logic necessary for interrogating and
    updating a particular View into a single helper class, we remove
    the need for the command classes to have any knowledge about the
    implementation of the View.  The ViewHelper class decouples our
    presentation from the control of the application.
    </p>
        <p>
    A ViewHelper belongs to a particular View in the application; when
    a ViewHelper is created, its id is used to register
    against a particular View component (such as a particular
    tab in a TabNavigator, or a particular screen in a ViewStack).  The
    developer then uses the ViewLocator to locate the particular
    ViewHelper for interrogation or update of a particular View.
    </p>
    
    ]]></description>
               <shortDescription><![CDATA[
    <p><strong>Deprecated as of Cairngorm 2.1.</strong></p>
    
    Used to isolate command classes from the implementation details of a view.]]></shortDescription>
               <versions/>
               <author/>
               <sees>
                  <see href="" label="com.adobe.cairngorm.model.ModelLocator"/>
                  <see href="../view/ViewLocator.html" label="com.adobe.cairngorm.view.ViewLocator"/>
               </sees>
               <asAncestors/>
               <asImplements>
                  <asAncestor>
                     <classRef name="mx.core.IMXMLObject" fullName="mx.core.IMXMLObject" relativePath="none"/>
                  </asAncestor>
               </asImplements>
               <methods>
                  <method name="initialized" fullname="com.adobe.cairngorm.view:ViewHelper/initialized" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
       On initialization, the view is initialized with the <code>ViewLocator</code>
       with the <code>ViewLocator</code>, using its <code>id</code>.
       On Event.REMOVED and Event.ADDED events of a view, 
       the view is registered or unregistered from the <code>ViewLocator</code>.
       <p>The <code>initialized</code> method is called by the Flex component
       framework after a component has been initialized, so long as the
       component implements <code>mx.core.IMXMLObject</code>.</p>
       ]]></description>
                     <shortDescription><![CDATA[
       On initialization, the view is initialized with the <code>ViewLocator</code>
       with the <code>ViewLocator</code>, using its <code>id</code>.]]></shortDescription>
                     <versions/>
                     <result type="void"/>
                     <params>
                        <param name="document" type="Object"/>
                        <param name="id" type="String"/>
                     </params>
                  </method>
               </methods>
               <fields>
                  <field name="view" fullname="com.adobe.cairngorm.view:ViewHelper/protected:view" accessLevel="protected" type="Object" isConst="false" isStatic="false">
                     <description><![CDATA[
      The view referred to by this view helper
      ]]></description>
                     <shortDescription><![CDATA[
      The view referred to by this view helper
      ]]></shortDescription>
                     <versions/>
                  </field>
                  <field name="id" fullname="com.adobe.cairngorm.view:ViewHelper/protected:id" accessLevel="protected" type="String" isConst="false" isStatic="false">
                     <description><![CDATA[
      The id of the view 
      ]]></description>
                     <shortDescription><![CDATA[
      The id of the view 
      ]]></shortDescription>
                     <versions/>
                  </field>
               </fields>
            </asClass>
            <asClass name="ViewLocator" type="class" fullname="com.adobe.cairngorm.view:ViewLocator" accessLevel="public" isFinal="false" isDynamic="false" packageName="com.adobe.cairngorm.view" path="" relativePath="../" href="" taghref="" inheritDoc="false">
               <description><![CDATA[
    <p><strong>Deprecated as of Cairngorm 2.1.</strong></p>
    
    The ViewLocator is a singleton class, that is used to retreive ViewHelper
    classes that can manipulate (get/set/switch) the user interface of a
    Cairngorm RIA.
        <p>Model-View-Controller (MVC) best practices specify that command classes 
    should interact with the view using the model (see the ModelLocator class), 
    but in some instance, command classes may require the assistance of 
    ViewHelpers to get/set the user interface associated with the work they 
    are designed to perform.  ViewHelper classes contain methods that allow 
    them to interrogate (get) individual elements of the view, such as the 
    values of form fields, and to update the user interface, such as setting the 
    data provider on DataGrids or Listcomponents.  Additionally, a command may 
    choose to toggle the user interface from one view to another - for instance, 
    to take the user to a checkout screen.</p>
        <p>
    The ViewLocator class is used to allow commands to instantly retrieve
    the appropriate ViewHelper.  A command need only know the canonical
    name of a ViewHelper and the ViewLocator will return an instance of
    the appropriate ViewHelper class.  In this way, command classes can
    manipulate the View irrespective of its implementation.
    </p>
        ]]></description>
               <shortDescription><![CDATA[
    <p><strong>Deprecated as of Cairngorm 2.1.</strong></p>
    
    The ViewLocator is a singleton class, that is used to retreive ViewHelper
    classes that can manipulate (get/set/switch) the user interface of a
    Cairngorm RIA.]]></shortDescription>
               <versions/>
               <author/>
               <sees>
                  <see href="" label="com.adobe.cairngorm.model.ModelLocator"/>
                  <see href="../view/ViewHelper.html" label="com.adobe.cairngorm.view.ViewHelper"/>
                  <see href="" label="com.adobe.cairngorm.commands.ICommand"/>
               </sees>
               <asAncestors/>
               <constructors>
                  <constructor name="ViewLocator" fullname="com.adobe.cairngorm.view:ViewLocator/ViewLocator" accessLevel="public" result_type="*" inheritDoc="false">
                     <description><![CDATA[
       The ViewLocator constructor should only be created
       through the static singleton getInstance() method.  ViewLocator
       maintains a hash map of ViewHelpers, keyed on viewName with a
       particular view as the value stored in the hash map.
       ]]></description>
                     <shortDescription><![CDATA[
       The ViewLocator constructor should only be created
       through the static singleton getInstance() method.]]></shortDescription>
                     <versions/>
                     <result type="*"/>
                  </constructor>
               </constructors>
               <methods>
                  <method name="getInstance" fullname="com.adobe.cairngorm.view:ViewLocator/getInstance" accessLevel="public" result_type="com.adobe.cairngorm.view:ViewLocator" isFinal="false" isOverride="false" isStatic="true" inheritDoc="false">
                     <description><![CDATA[
       Singleton access to the ViewLocator is assured through the static getInstance()
       method, which is used to retrieve the only ViewLocator instance in a Cairngorm
       application.
              <p>Wherever there is a need to retreive the ViewLocator instance, it is achieved
       using the following code:</p>
              <pre>
       var viewLocator:ViewLocator = ViewLocator.getInstance();
       </pre>
       ]]></description>
                     <shortDescription><![CDATA[
       Singleton access to the ViewLocator is assured through the static getInstance()
       method, which is used to retrieve the only ViewLocator instance in a Cairngorm
       application.]]></shortDescription>
                     <versions/>
                     <result type="com.adobe.cairngorm.view:ViewLocator">
                        <classRef name="ViewLocator" fullName="com.adobe.cairngorm.view:ViewLocator" packageName="com.adobe.cairngorm.view" relativePath="../view/ViewLocator.html"/>
                     </result>
                  </method>
                  <method name="register" fullname="com.adobe.cairngorm.view:ViewLocator/register" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
       Registers a viewHelper under a canonical viewName.
              <p>In order that the application developer need not know
       the implementation of the view, a ViewHelper capable of manipulating
       a given view is registered under a simple canonical name.</p>
       <p>
       For example, a LoginViewHelper may allow the manipulation of a
       Login window, that may start life as a PopUpWindow, but later be
       changed to a screen in a ViewStack.  By registering the LoginViewHelper
       with the viewName "login", then any code that fetches the ViewHelper
       by it's name "login", and then calls methods on the ViewHelper, is
       completely insulated from any changes in the implementation of the
       view, and the implementation of the ViewHelper.
       </p>
       <p>
       If a view is already registered with the canonical name, and Error
       is thrown.
       </p>
       ]]></description>
                     <shortDescription><![CDATA[
       Registers a viewHelper under a canonical viewName.]]></shortDescription>
                     <versions/>
                     <result type="void"/>
                     <params>
                        <param name="viewName" type="String">
                           <description><![CDATA[A simple canonical name for the view that the ViewHelper
       will manipulate, eg "login"
       ]]></description>
                        </param>
                        <param name="viewHelper" type="com.adobe.cairngorm.view:ViewHelper">
                           <classRef name="ViewHelper" fullName="com.adobe.cairngorm.view:ViewHelper" packageName="com.adobe.cairngorm.view" relativePath="ViewHelper.html"/>
                           <description><![CDATA[An instance of a ViewHelper
       ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="unregister" fullname="com.adobe.cairngorm.view:ViewLocator/unregister" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
       Unregisters a viewHelper using its canonical name.
              ]]></description>
                     <shortDescription><![CDATA[
       Unregisters a viewHelper using its canonical name.]]></shortDescription>
                     <versions/>
                     <result type="void"/>
                     <params>
                        <param name="viewName" type="String">
                           <description><![CDATA[The canonical name for the view to be removed
       ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="getViewHelper" fullname="com.adobe.cairngorm.view:ViewLocator/getViewHelper" accessLevel="public" result_type="com.adobe.cairngorm.view:ViewHelper" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
       Retrieves the ViewHelper instance that has previously been registered
       with viewName.
              ]]></description>
                     <shortDescription><![CDATA[
       Retrieves the ViewHelper instance that has previously been registered
       with viewName.]]></shortDescription>
                     <versions/>
                     <result type="com.adobe.cairngorm.view:ViewHelper">
                        <classRef name="ViewHelper" fullName="com.adobe.cairngorm.view:ViewHelper" packageName="com.adobe.cairngorm.view" relativePath="../view/ViewHelper.html"/>
                     </result>
                     <params>
                        <param name="viewName" type="String">
                           <description><![CDATA[The name of the view for which we wish to retrieve a
       ViewHelper, eg "login"
       ]]></description>
                        </param>
                     </params>
                     <customs>
                        <returns><![CDATA[The ViewHelper instance that is required to manipulate the
       view registered with viewName
       ]]></returns>
                     </customs>
                  </method>
                  <method name="registrationExistsFor" fullname="com.adobe.cairngorm.view:ViewLocator/registrationExistsFor" accessLevel="public" result_type="Boolean" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
       Returns whether a view has been registered with a canonical name.
              <p>If two views are registered with the same canonical name,
       the second entry will overwrite the first. This method can be used to check
       whether a view has already been registered with a canonical name.</p>
              ]]></description>
                     <shortDescription><![CDATA[
       Returns whether a view has been registered with a canonical name.]]></shortDescription>
                     <versions/>
                     <result type="Boolean"><![CDATA[A Boolean that indicates if a view is already registered with that
       view name
       ]]></result>
                     <params>
                        <param name="viewName" type="String">
                           <description><![CDATA[canonical name for the view that the ViewHelper will check, eg
       "login"
       ]]></description>
                        </param>
                     </params>
                  </method>
               </methods>
            </asClass>
         </classes>
      </asPackage>
      <asPackage name="com.universalmind.cairngorm.business">
         <classes>
            <asClass name="Delegate" type="class" fullname="com.universalmind.cairngorm.business:Delegate" accessLevel="public" isFinal="false" isDynamic="false" packageName="com.universalmind.cairngorm.business" path="" relativePath="../" href="" taghref="" inheritDoc="false">
               <description><![CDATA[
    A base class used to access remote data services or local storage mechanisms.
    A Delegate subclass is usually used for 1-to-1 mappings to services and API calls on the remote server
        <p>
    While some MVC approaches deprecate the use of Delegates as an un-necessary layer 
    and use the Command classes to directly access the Services[.mxml]-based services,
    that bypass is not recommended. 
    
    This base class provides several functional features that reduce complexities
    for subclasses:
      a) Implicit getter "service" that will return an internal lookup of the service with the name specified in the 
         Delegate constructor
      b) getServiceByName() that will look up the service by name from the ServiceLocator singleton
      c) prepareHandlers() that will connect any IResponder handlers to the AsyncToken produced by calls to remote dataservices
    
    </p>
        <p>
    The Delegate class is ideal class to:
      a) to queue multiple server calls for 1 command request
      b) to transform the data before delivery to the command.
         e.g. 
           Transform incoming structures to value objects 
           Transform outgoing value objects to XML  
    </p>
        <p>
    Delegates use a responder constructor argument that will be used to announce
    responses (result or fault) for asynchronous events. The responders is typically an
    instance of the Command class. However, it may also be ANY class that supports the IResponder
    interface. 
    
    Below is sample code 
    </p>
        ]]></description>
               <shortDescription><![CDATA[
    A base class used to access remote data services or local storage mechanisms.]]></shortDescription>
               <versions/>
               <author/>
               <example><![CDATA[The following is an example Delegate subclass that (a) uses intermediate responders, 
    (b) transformation utils, and (c) notifyCallers() [usually a Command instance]. 
    <listing version="3.0">
       public class LoginDelegate extends Delegate {
      
           public function LoginDelegate(handlers:IResponder,serviceID:String = "") {
         if (serviceID == "") serviceID = "serviceLogin";
             super(handlers,serviceID);
           }
    
           public function loginUser(user:UserVO) : void {
               var token    : AsyncToken = service.loginUser(user);
               var handlers : Callbacks  = new Callbacks(onResults_loginUser);
                   // Here we want to use an intermediate handler BEFORE we use the original
               // responder.
               prepareHandlers(token,handlers);
           }
    
           public function onResults_doLogin(event:ResultEvent):void {
               var response : LoginResponseVO = (event.result as LoginResponseVO);
               var login    : LoginUtils      = new LoginUtils(response);
               if (login.status == LoginUtils.ERROR_USER_ALREADY_CONNECTED) {
                    response.errorCode = LoginUtils.LOGIN_GOOD;
               }
     
               // This uses [internally] the original delegate responder...
               notifyCallers(new ResultEvent(response));
           }
        }
    </listing>
     
    ]]></example>
               <sees>
                  <see href="../events/Callbacks.html" label="com.universalmind.cairngorm.events.Callbacks"/>
               </sees>
               <asAncestors/>
               <constructors>
                  <constructor name="Delegate" fullname="com.universalmind.cairngorm.business:Delegate/Delegate" accessLevel="public" result_type="*" inheritDoc="false">
                     <description><![CDATA[
      Constructor that allows easy registration of responder and the ID/name of the service
      instance that should be used for remote calls
      
      ]]></description>
                     <shortDescription><![CDATA[
      Constructor that allows easy registration of responder and the ID/name of the service
      instance that should be used for remote calls
      
      ]]></shortDescription>
                     <versions/>
                     <result type="*"/>
                     <params>
                        <param name="commandHandlers" type="mx.rpc:IResponder" default="null">
                           <description><![CDATA[This responder that will be used as the synchronous or asynchronous response
      to a delegate call
      
      ]]></description>
                        </param>
                        <param name="serviceName" type="String" default="">
                           <description><![CDATA[This is the ID or name of the service [HTTPService, RemoteObject, WebService] that
      should be used to perform the remote dataservice call. This service instance is retrieved via an internal
      call to the ServiceLocator.
      ]]></description>
                        </param>
                     </params>
                  </constructor>
               </constructors>
               <methods>
                  <method name="getServiceByName" fullname="com.universalmind.cairngorm.business:Delegate/getServiceByName" accessLevel="public" result_type="Object" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
    Utility method to get a service by name; useful if a delegate call needs a service
    that is different originally registered in the Delegate constructor
    
    ]]></description>
                     <shortDescription><![CDATA[
    Utility method to get a service by name; useful if a delegate call needs a service
    that is different originally registered in the Delegate constructor
    
    ]]></shortDescription>
                     <versions/>
                     <result type="Object"><![CDATA[An instance of either a WebService, HTTPService, RemoteObject, or null.
    ]]></result>
                     <params>
                        <param name="serviceName" type="String" default=""/>
                     </params>
                  </method>
                  <method name="prepareResponder" fullname="com.universalmind.cairngorm.business:Delegate/prepareResponder" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="true" inheritDoc="false">
                     <description><![CDATA[
   Static utility method used to quickly add responder handlers to an AsyncToken
   
   ]]></description>
                     <shortDescription><![CDATA[
   Static utility method used to quickly add responder handlers to an AsyncToken
   
   ]]></shortDescription>
                     <versions/>
                     <result type="void"/>
                     <params>
                        <param name="token" type="mx.rpc:AsyncToken">
                           <description><![CDATA[          AsyncToken that is returned from a AbstractMethod call
   ]]></description>
                        </param>
                        <param name="resultHandler" type="Function">
                           <description><![CDATA[  Function that should be invoked asynchronously to handle the ResultEvent
   ]]></description>
                        </param>
                        <param name="faultHandler" type="Function">
                           <description><![CDATA[   Function that should be invoked asynchronously to handle the FaultEvent
   
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="prepareHandlersWithOptions" fullname="com.universalmind.cairngorm.business:Delegate/prepareHandlersWithOptions" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Utility method used to add responder handlers (and options) to an AsyncToken
   
   ]]></description>
                     <shortDescription><![CDATA[
   Utility method used to add responder handlers (and options) to an AsyncToken
   
   ]]></shortDescription>
                     <versions/>
                     <result type="void"/>
                     <params>
                        <param name="token" type="mx.rpc:AsyncToken" default="null">
                           <description><![CDATA[          AsyncToken that is returned from a AbstractMethod call
   ]]></description>
                        </param>
                        <param name="options" type="" default="null">
                           <description><![CDATA[        Generic object that contains one or more properties/objects that should be cached while waiting for a response from the aysnchronous call
   
   ]]></description>
                        </param>
                        <param name="handlers" type="com.universalmind.cairngorm.events:Callbacks" default="null">
                           <classRef name="Callbacks" fullName="com.universalmind.cairngorm.events:Callbacks" packageName="com.universalmind.cairngorm.events" relativePath="../events/Callbacks.html"/>
                           <description><![CDATA[   Callbacks instance to specific overrides to the current responder. This allows
   inidividual methods to have custom handlers internal to the Delegate subclass. Such solutions would be used to transform data
   before a Command responder is then called. 
   
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="prepareHandlers" fullname="com.universalmind.cairngorm.business:Delegate/prepareHandlers" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <canThrow>
                        <description><![CDATA[Announces that the service instance has not been initialized properly. 
   ]]></description>
                     </canThrow>
                     <description><![CDATA[
   Utility method used to add responder handlers (and options) to an AsyncToken. If the service token has not been configured
   properly, this method will throw an error announcing an initialization issue with the service.
   
   ]]></description>
                     <shortDescription><![CDATA[
   Utility method used to add responder handlers (and options) to an AsyncToken.]]></shortDescription>
                     <versions/>
                     <result type="void"/>
                     <params>
                        <param name="token" type="mx.rpc:AsyncToken" default="null">
                           <description><![CDATA[          AsyncToken that is returned from a AbstractMethod call
   ]]></description>
                        </param>
                        <param name="handlers" type="com.universalmind.cairngorm.events:Callbacks" default="null">
                           <classRef name="Callbacks" fullName="com.universalmind.cairngorm.events:Callbacks" packageName="com.universalmind.cairngorm.events" relativePath="../events/Callbacks.html"/>
                           <description><![CDATA[   Callbacks instance to specific overrides to the current responder. This allows
   inidividual methods to have custom handlers internal to the Delegate subclass. Such solutions would be used to transform data
   before a Command responder is then called. 
      ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="notifyCaller" fullname="com.universalmind.cairngorm.business:Delegate/notifyCaller" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
     This method allows a delegate method to manually announce a response to the the original responder.
     This method is normally not used since the prepareHandlers() call connects the asynchronous handlers for the 
     responder DIRECTLY to the remote call. In such cases the delegate is bypassed completely.
     
     <p>
     However, if the delegate call wishes to "massage" the incoming response before notifying the original responder
     then prepareHandlers() is given an "intermediate" responder... and the developer is then responsible for manually invoking
     the original responder. Below is an example for a LoginDelegate subclass:
     
      <pre>
      public function loginUser(user:UserVO) : void {
         var token    : AsyncToken = service.loginUser(user);
         var handlers : Callbacks  = new Callbacks(onResults_loginUser);
               // Here we want to use an intermediate handler BEFORE we use the original
         // responder.
         prepareHandlers(token,handlers);
      }
      
      public function onResults_doLogin(event:ResultEvent):void {
         var response : LoginResponseVO = (event.result as LoginResponseVO); 
         if (response.errorCode == ERROR_USER_ALREADY_CONNECTED) {
              response.errorCode = LOGIN_GOOD;
         }
       
         // This uses [internally] the original delegate responder...
         notifyCaller(response,event);
      }
      </pre>
      
      ]]></description>
                     <shortDescription><![CDATA[
     This method allows a delegate method to manually announce a response to the the original responder.]]></shortDescription>
                     <versions/>
                     <result type="void"/>
                     <params>
                        <param name="results" type="" default="null"/>
                        <param name="srcEvent" type="" default="null"/>
                     </params>
                     <customs>
                        <results><![CDATA[   This is the data or event to return to the "original" IResponder
      ]]></results>
                        <srcEvent><![CDATA[  This is the original event generated as response to the Delegates asynchronous call
     ]]></srcEvent>
                     </customs>
                  </method>
               </methods>
               <fields>
                  <field name="responder" fullname="com.universalmind.cairngorm.business:Delegate/responder/get" accessLevel="public" isConst="false" isStatic="false" type="mx.rpc:IResponder" inheritDoc="false" only="read">
                     <description><![CDATA[
    public read-only access to current Responder
    
    ]]></description>
                     <shortDescription><![CDATA[
    public read-only access to current Responder
    
    ]]></shortDescription>
                     <versions/>
                  </field>
                  <field name="service" fullname="com.universalmind.cairngorm.business:Delegate/service/get" accessLevel="public" isConst="false" isStatic="false" type="Object" inheritDoc="false" only="read">
                     <description><![CDATA[
      Getter that performs an internal lookup of the service using the ServiceLocator. Note the serviceName
      used is the one originally registered in the Delegate constructor. The Delegate subclass NEVER have to use
      or import a ServiceLocator; such details are encapsulated and handled by this Delegate parent class. 
   
   ]]></description>
                     <shortDescription><![CDATA[
      Getter that performs an internal lookup of the service using the ServiceLocator.]]></shortDescription>
                     <versions/>
                  </field>
               </fields>
            </asClass>
            <asClass name="ServiceLocator" type="class" fullname="com.universalmind.cairngorm.business:ServiceLocator" accessLevel="public" isFinal="false" isDynamic="false" packageName="com.universalmind.cairngorm.business" path="" relativePath="../" href="" taghref="" inheritDoc="false">
               <description><![CDATA[
    This ServiceLocator provides two methods in addition to the standard adobe.cairngorm...ServiceLocator:
    updateServiceURLs() and findServiceByName(). 
    
    <p>
    
    A ServiceLocator is still intended to be subclassed by a Services.mxml class... and it is that class
    that is mxml tag instantiated in the <mx:Application /> class. The ServiceLocator is intended to provide
    easy access to HTTPService, WebService, and RemoteObject instances using IDs. The Universal Mind ServiceLocator
    also provides an easy way to update 1 or more service instances with URLs strings that are loaded at runtime.
    <br/><br/>
    
    </p>
    
    ]]></description>
               <shortDescription><![CDATA[
    This ServiceLocator provides two methods in addition to the standard adobe.cairngorm...ServiceLocator:
    updateServiceURLs() and findServiceByName().]]></shortDescription>
               <versions/>
               <author/>
               <example><![CDATA[Consider the code (Services.mxml) below that demonstrates the intended manner in which the ServiceLocator is subclassed:  
    <pre> 
      
      &lt;?xml version="1.0" encoding="utf-8"?&gt;
      &lt;service:ServiceLocator xmlns:mx="http://www.adobe.com/2006/mxml" 
                            xmlns:service="com.universalmind.cairngorm.business. &gt;
    
           &lt;mx:HTTPService id="loginService"  url="https://trail.clientX.com/login.do" 
                                                 resultFormat="e4x" useProxy="false" /&gt;
    
            &lt;mx:RemoteObject id="ratingService" destination="clientXRatingServices"&gt;
                  &lt;mx:method name="getRatingsByDate" makeObjectsBindable="true" /&gt;
            &lt;/mx:RemoteObject&gt;
    
      &lt;/service:ServiceLocator&gt;
    </pre>
    
    ]]></example>
               <sees>
                  <see href="../../../adobe/cairngorm/business/ServiceLocator.html" label="com.adobe.cairngorm.business.ServiceLocator"/>
               </sees>
               <asAncestors>
                  <asAncestor>
                     <classRef name="ServiceLocator" fullName="com.adobe.cairngorm.business:ServiceLocator" packageName="com.adobe.cairngorm.business" relativePath="../../../adobe/cairngorm/business/ServiceLocator.html"/>
                     <fields>
                        <field name="__instance" fullname="com.adobe.cairngorm.business:ServiceLocator/protected:__instance" accessLevel="protected" type="com.adobe.cairngorm.business:ServiceLocator" isConst="false" isStatic="true">
                           <classRef name="ServiceLocator" fullName="com.adobe.cairngorm.business:ServiceLocator" packageName="com.adobe.cairngorm.business" relativePath="../../../adobe/cairngorm/business/ServiceLocator.html"/>
                        </field>
                     </fields>
                     <methods>
                        <method name="getHTTPService" fullname="com.adobe.cairngorm.business:ServiceLocator/getHTTPService" accessLevel="public" result_type="mx.rpc.http:HTTPService" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
       Return the HTTPService for the given name.]]></shortDescription>
                           <params>
                              <param name="name" type="String"/>
                           </params>
                        </method>
                        <method name="getRemoteObject" fullname="com.adobe.cairngorm.business:ServiceLocator/getRemoteObject" accessLevel="public" result_type="mx.rpc.remoting:RemoteObject" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
       Return the RemoteObject for the given name.]]></shortDescription>
                           <params>
                              <param name="name" type="String"/>
                           </params>
                        </method>
                        <method name="getWebService" fullname="com.adobe.cairngorm.business:ServiceLocator/getWebService" accessLevel="public" result_type="mx.rpc.soap:WebService" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
       Return the WebService for the given name.]]></shortDescription>
                           <params>
                              <param name="name" type="String"/>
                           </params>
                        </method>
                        <method name="setCredentials" fullname="com.adobe.cairngorm.business:ServiceLocator/setCredentials" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
       Set the credentials for all registered services.]]></shortDescription>
                           <params>
                              <param name="username" type="String"/>
                              <param name="password" type="String"/>
                           </params>
                        </method>
                        <method name="setRemoteCredentials" fullname="com.adobe.cairngorm.business:ServiceLocator/setRemoteCredentials" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
       Set the remote credentials for all registered services.]]></shortDescription>
                           <params>
                              <param name="username" type="String"/>
                              <param name="password" type="String"/>
                           </params>
                        </method>
                        <method name="logout" fullname="com.adobe.cairngorm.business:ServiceLocator/logout" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
       Logs the user out of all registered services.]]></shortDescription>
                        </method>
                     </methods>
                  </asAncestor>
               </asAncestors>
               <methods>
                  <method name="getInstance" fullname="com.universalmind.cairngorm.business:ServiceLocator/getInstance" accessLevel="public" result_type="com.adobe.cairngorm.business:ServiceLocator" isFinal="false" isOverride="false" isStatic="true" inheritDoc="false">
                     <description><![CDATA[
         Return the ServiceLocator __instance.
         
         ]]></description>
                     <shortDescription><![CDATA[
         Return the ServiceLocator __instance.]]></shortDescription>
                     <versions/>
                     <result type="com.adobe.cairngorm.business:ServiceLocator">
                        <![CDATA[the instance of com.universalmind.cairngorm.business.ServiceLocator. 
         Note: this should be an instantiation of com.universalmind.cairngorm.business.ServiceLocator
         ]]>
                        <classRef name="ServiceLocator" fullName="com.adobe.cairngorm.business:ServiceLocator" packageName="com.adobe.cairngorm.business" relativePath="../../../adobe/cairngorm/business/ServiceLocator.html"/>
                     </result>
                  </method>
                  <method name="updateServiceURLs" fullname="com.universalmind.cairngorm.business:ServiceLocator/updateServiceURLs" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
          Method to initialize services with cross-reference URL table.
          This allows services to be initialized based on a runtime loaded configuration file.
           
          <pre>
               urlDetails = [
                              {serviceName, localURL, remoteURL},
                              {serviceName, localURL, remoteURL}
                            ];
          <pre> 
                    ]]></description>
                     <shortDescription><![CDATA[
          Method to initialize services with cross-reference URL table.]]></shortDescription>
                     <versions/>
                     <result type="void"/>
                     <params>
                        <param name="urlDetails" type="Array"/>
                     </params>
                     <customs>
                        <urlDetails><![CDATA[This the array of init objects
          ]]></urlDetails>
                     </customs>
                  </method>
                  <method name="findServiceByName" fullname="com.universalmind.cairngorm.business:ServiceLocator/findServiceByName" accessLevel="public" result_type="*" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <canThrow>
                        <description><![CDATA[the service was not found, an error may be thrown.
          ]]></description>
                     </canThrow>
                     <description><![CDATA[
          Utility method to get reference to any service instance based on the service name/id.
          
          ]]></description>
                     <shortDescription><![CDATA[
          Utility method to get reference to any service instance based on the service name/id.]]></shortDescription>
                     <versions/>
                     <result type="*"/>
                     <params>
                        <param name="serviceName" type="String"/>
                        <param name="throwError" type="Boolean" default="true"/>
                     </params>
                     <customs>
                        <serviceName><![CDATA[The service name/id specified when the service was instantiated. Note the service type is
          irrelevant. Using the service name/id a RemoteObject, WebService, or HTTPService instance can be returned.
                    ]]></serviceName>
                     </customs>
                  </method>
               </methods>
               <fields>
                  <field name="local" fullname="com.universalmind.cairngorm.business:ServiceLocator/local" accessLevel="public" type="Boolean" isConst="false" isStatic="false" defaultValue="false">
                     <description><![CDATA[
          Variable to all switch between remote data services and local files
          ]]></description>
                     <shortDescription><![CDATA[
          Variable to all switch between remote data services and local files
          ]]></shortDescription>
                     <versions/>
                  </field>
                  <field name="urlDetails" fullname="com.universalmind.cairngorm.business:ServiceLocator/urlDetails" accessLevel="public" type="Array" isConst="false" isStatic="false" defaultValue="unknown">
                     <description><![CDATA[
          Cross-reference table of serviceName, local URL, and remote URL
          ]]></description>
                     <shortDescription><![CDATA[
          Cross-reference table of serviceName, local URL, and remote URL
          ]]></shortDescription>
                     <versions/>
                  </field>
               </fields>
            </asClass>
         </classes>
      </asPackage>
      <asPackage name="com.universalmind.cairngorm.control">
         <classes>
            <asClass name="BaseController" type="class" fullname="com.universalmind.cairngorm.control:BaseController" accessLevel="public" isFinal="false" isDynamic="false" packageName="com.universalmind.cairngorm.control" path="" relativePath="../" href="" taghref="" inheritDoc="false">
               <description><![CDATA[
          The traditional cairngorm FrontController requires events to be dispatched
     to the CairngormEventDispatcher in order for the "event->command" mappings to 
     trigger. This Class continues to support that mechanism [for direct triggering] but now
     supports an improved mechanism for dispatching CairngormEvents from the UI layers.
     
     <p> 
     Alternate extensions have modified the FrontController to not only register
     events with the CairngormEventDispatcher but also with the <mx:Application>.
     This solution would allow events - via event bubbling - to reach the Cairngorm framework
     and not require the use of CairngormEventDispatcher in view class. Opponents 
     of this solution did not want their Cairngorm events to bubble thru the entire 
     view hierarchy.
     </p>
     
     <p>
     Recent changes have now leveraged a UIComponent event hook to not only dispatch
     the event "up" the view hierarchy but to also directly trigger the Cairngorm 
     event->command mapping (if any exists).
     </p>
     ]]></description>
               <shortDescription><![CDATA[
          The traditional cairngorm FrontController requires events to be dispatched
     to the CairngormEventDispatcher in order for the "event->command" mappings to 
     trigger.]]></shortDescription>
               <versions/>
               <author/>
               <asDecendants>
                  <classRef name="FrontController" fullName="com.universalmind.cairngorm.control:FrontController" packageName="com.universalmind.cairngorm.control" relativePath="../control/FrontController.html"/>
                  <classRef name="ModuleController" fullName="com.universalmind.cairngorm.control:ModuleController" packageName="com.universalmind.cairngorm.control" relativePath="../control/ModuleController.html"/>
               </asDecendants>
               <asAncestors>
                  <asAncestor>
                     <classRef name="FrontController" fullName="com.adobe.cairngorm.control:FrontController" packageName="com.adobe.cairngorm.control" relativePath="../../../adobe/cairngorm/control/FrontController.html"/>
                     <fields>
                        <field name="commands" fullname="com.adobe.cairngorm.control:FrontController/protected:commands" accessLevel="protected" type="flash.utils:Dictionary" isConst="false" isStatic="false" defaultValue="">
                           <shortDescription><![CDATA[
      Dictionary of event name to command class mappings
      ]]></shortDescription>
                        </field>
                     </fields>
                     <methods>
                        <method name="addCommand" fullname="com.adobe.cairngorm.control:FrontController/addCommand" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
      Registers a ICommand class with the Front Controller, against an event name
      and listens for events with that name.]]></shortDescription>
                           <params>
                              <param name="commandName" type="String"/>
                              <param name="commandRef" type="Class"/>
                              <param name="useWeakReference" type="Boolean" default="true"/>
                           </params>
                        </method>
                        <method name="removeCommand" fullname="com.adobe.cairngorm.control:FrontController/removeCommand" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
      Deregisters an ICommand class with the given event name from the Front Controller 
            ]]></shortDescription>
                           <params>
                              <param name="commandName" type="String"/>
                           </params>
                        </method>
                        <method name="executeCommand" fullname="com.adobe.cairngorm.control:FrontController/protected:executeCommand" accessLevel="protected" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
      Executes the command
      ]]></shortDescription>
                           <params>
                              <param name="event" type="com.adobe.cairngorm.control:CairngormEvent">
                                 <classRef name="CairngormEvent" fullName="com.adobe.cairngorm.control:CairngormEvent" packageName="com.adobe.cairngorm.control" relativePath="../../../adobe/cairngorm/control/CairngormEvent.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="getCommand" fullname="com.adobe.cairngorm.control:FrontController/protected:getCommand" accessLevel="protected" result_type="Class" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
      Returns the command class registered with the command name.]]></shortDescription>
                           <params>
                              <param name="commandName" type="String"/>
                           </params>
                        </method>
                     </methods>
                  </asAncestor>
               </asAncestors>
               <methods>
                  <method name="listenForEvent" fullname="com.universalmind.cairngorm.control:BaseController/protected:listenForEvent" accessLevel="protected" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
         This function allows FrontController subclasses to easily register new 
         event-command mappings.
         
         ]]></description>
                     <shortDescription><![CDATA[
         This function allows FrontController subclasses to easily register new 
         event-command mappings.]]></shortDescription>
                     <versions/>
                     <result type="void"/>
                     <params>
                        <param name="eventType" type="String"/>
                        <param name="handler" type="Function"/>
                     </params>
                     <customs>
                        <handler><![CDATA[  This is the event handler; usually this is the FrontController::execute()
         ]]></handler>
                     </customs>
                  </method>
               </methods>
            </asClass>
            <asClass name="ModuleController" type="class" fullname="com.universalmind.cairngorm.control:ModuleController" accessLevel="public" isFinal="false" isDynamic="false" packageName="com.universalmind.cairngorm.control" path="" relativePath="../" href="" taghref="" inheritDoc="false">
               <description><![CDATA[
     This ModuleController allows mini-MVC frameworks to be registered and used
     as part of applications MVC framework.
     
     <p>
     Often applications are developed with distinct modules (dynamically loaded
     or static compiled). These modules may contain their own mini-Cairngorm MVC
     but need to be used with the scope of an application MVC; used without namespace
     conflicts or overrides.
     </p>
     
     <p>
     Each subcontroller maps its own events to its own commands. This allows modules 
     sub-MVCs to be "plugged" into other applications easily. Note that all subController
     events must be registered during construction.
     </p>
     
     <pre>
     
          public class SalesController extends ModuleController {
            
              public function SalesController() {
                 registerModuleEvents();
              }
     
              private function registerModuleEvents():void {
                  addCommand(GetSalesByRegionEvent.EVENT_ID, SalesCommand);
                  addCommand(GetAllSalesEvent.EVENT_ID,      SalesCommand);
                 
                  addCommand(RequestRefundEvent.EVENT_ID,    RefundCommand);
              }
          }
     
     </pre>
     
     ]]></description>
               <shortDescription><![CDATA[
     This ModuleController allows mini-MVC frameworks to be registered and used
     as part of applications MVC framework.]]></shortDescription>
               <versions/>
               <author/>
               <asAncestors>
                  <asAncestor>
                     <classRef name="BaseController" fullName="com.universalmind.cairngorm.control:BaseController" packageName="com.universalmind.cairngorm.control" relativePath="BaseController.html"/>
                     <methods>
                        <method name="listenForEvent" fullname="com.universalmind.cairngorm.control:BaseController/protected:listenForEvent" accessLevel="protected" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
         This function allows FrontController subclasses to easily register new 
         event-command mappings.]]></shortDescription>
                           <params>
                              <param name="eventType" type="String"/>
                              <param name="handler" type="Function"/>
                           </params>
                        </method>
                     </methods>
                  </asAncestor>
                  <asAncestor>
                     <classRef name="FrontController" fullName="com.adobe.cairngorm.control:FrontController" packageName="com.adobe.cairngorm.control" relativePath="../../../adobe/cairngorm/control/FrontController.html"/>
                     <fields>
                        <field name="commands" fullname="com.adobe.cairngorm.control:FrontController/protected:commands" accessLevel="protected" type="flash.utils:Dictionary" isConst="false" isStatic="false" defaultValue="">
                           <shortDescription><![CDATA[
      Dictionary of event name to command class mappings
      ]]></shortDescription>
                        </field>
                     </fields>
                     <methods>
                        <method name="addCommand" fullname="com.adobe.cairngorm.control:FrontController/addCommand" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
      Registers a ICommand class with the Front Controller, against an event name
      and listens for events with that name.]]></shortDescription>
                           <params>
                              <param name="commandName" type="String"/>
                              <param name="commandRef" type="Class"/>
                              <param name="useWeakReference" type="Boolean" default="true"/>
                           </params>
                        </method>
                        <method name="removeCommand" fullname="com.adobe.cairngorm.control:FrontController/removeCommand" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
      Deregisters an ICommand class with the given event name from the Front Controller 
            ]]></shortDescription>
                           <params>
                              <param name="commandName" type="String"/>
                           </params>
                        </method>
                        <method name="executeCommand" fullname="com.adobe.cairngorm.control:FrontController/protected:executeCommand" accessLevel="protected" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
      Executes the command
      ]]></shortDescription>
                           <params>
                              <param name="event" type="com.adobe.cairngorm.control:CairngormEvent">
                                 <classRef name="CairngormEvent" fullName="com.adobe.cairngorm.control:CairngormEvent" packageName="com.adobe.cairngorm.control" relativePath="../../../adobe/cairngorm/control/CairngormEvent.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="getCommand" fullname="com.adobe.cairngorm.control:FrontController/protected:getCommand" accessLevel="protected" result_type="Class" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
      Returns the command class registered with the command name.]]></shortDescription>
                           <params>
                              <param name="commandName" type="String"/>
                           </params>
                        </method>
                     </methods>
                  </asAncestor>
               </asAncestors>
               <fields>
                  <field name="registeredEvents" fullname="com.universalmind.cairngorm.control:ModuleController/registeredEvents/get" accessLevel="public" isConst="false" isStatic="false" type="Array" inheritDoc="false" only="read">
                     <description><![CDATA[
      This method allows FrontControllers to easily access events that have
      been already registered with the ModuleController [aka subController].
      
      <p>
      Note: this assumes that all events have been registered by the
      ModuleController constructor. Events registered "later" will NOT
      be added to the FrontController global registry.
      </p>
      
      ]]></description>
                     <shortDescription><![CDATA[
      This method allows FrontControllers to easily access events that have
      been already registered with the ModuleController [aka subController].]]></shortDescription>
                     <versions/>
                     <sees>
                        <see href="../control/FrontController.html" label="com.universalmind.cairngorm.control.FrontController"/>
                     </sees>
                  </field>
                  <field name="eventHandler" fullname="com.universalmind.cairngorm.control:ModuleController/eventHandler/get" accessLevel="public" isConst="false" isStatic="false" type="Function" inheritDoc="false" only="read">
                     <description><![CDATA[
     This method exposes the ModuleController event processor to the
     FrontController so this subcontrollers events can be processed properly
     by "this" controllers commands
     
     ]]></description>
                     <shortDescription><![CDATA[
     This method exposes the ModuleController event processor to the
     FrontController so this subcontrollers events can be processed properly
     by "this" controllers commands
     
     ]]></shortDescription>
                     <versions/>
                     <sees>
                        <see href="../control/FrontController.html" label="com.universalmind.cairngorm.control.FrontController"/>
                     </sees>
                  </field>
               </fields>
            </asClass>
            <asClass name="FrontController" type="class" fullname="com.universalmind.cairngorm.control:FrontController" accessLevel="public" isFinal="false" isDynamic="false" packageName="com.universalmind.cairngorm.control" path="" relativePath="../" href="" taghref="" inheritDoc="false">
               <description><![CDATA[
     The UniversalMind FrontController is used as a "super"
     cairngorm controller to allow modules to register their own sub-controllers
     as part of the application set.
     
     <p>
     Often applications are developed with distinct modules (dynamically loaded
     or static compiled). These modules may contain their own mini-Cairngorm MVC
     but need to be used with the scope of an application MVC; used without namespace
     conflicts or overrides.
     </p>
     
     <p>
     Each subcontroller maps its own events to its own commands. This allows modules 
     sub-MVCs to be "plugged" into other applications easily.
     </p>
     
     <pre>
               import com.clientX.sales.control.SalesController;
          import com.clientX.accounts.control.AccountsController;
      
          public class ClientXController extends FrontController {
            
              public function SalesController() {
                 registerClientXEvents();
                 registerModules();
              }
     
              private function registerClientXEvents():void {
                   addCommand(LoginUserEvent.EVENT_ID,     LoginCommand);
                   addCommand(RegisterUserEvent.EVENT_ID,  RegistrationCommand);
              }
     
              private function registerModuleEvents():void {
                  addSubController(SalesController);
                  addSubController(AccountsController);
              }
          }
     
     </pre>
     
     ]]></description>
               <shortDescription><![CDATA[
     The UniversalMind FrontController is used as a "super"
     cairngorm controller to allow modules to register their own sub-controllers
     as part of the application set.]]></shortDescription>
               <versions/>
               <author/>
               <sees>
                  <see href="../control/ModuleController.html" label="com.universalmind.cairngorm.control.ModuleController"/>
               </sees>
               <asAncestors>
                  <asAncestor>
                     <classRef name="BaseController" fullName="com.universalmind.cairngorm.control:BaseController" packageName="com.universalmind.cairngorm.control" relativePath="BaseController.html"/>
                     <methods>
                        <method name="listenForEvent" fullname="com.universalmind.cairngorm.control:BaseController/protected:listenForEvent" accessLevel="protected" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
         This function allows FrontController subclasses to easily register new 
         event-command mappings.]]></shortDescription>
                           <params>
                              <param name="eventType" type="String"/>
                              <param name="handler" type="Function"/>
                           </params>
                        </method>
                     </methods>
                  </asAncestor>
                  <asAncestor>
                     <classRef name="FrontController" fullName="com.adobe.cairngorm.control:FrontController" packageName="com.adobe.cairngorm.control" relativePath="../../../adobe/cairngorm/control/FrontController.html"/>
                     <fields>
                        <field name="commands" fullname="com.adobe.cairngorm.control:FrontController/protected:commands" accessLevel="protected" type="flash.utils:Dictionary" isConst="false" isStatic="false" defaultValue="">
                           <shortDescription><![CDATA[
      Dictionary of event name to command class mappings
      ]]></shortDescription>
                        </field>
                     </fields>
                     <methods>
                        <method name="addCommand" fullname="com.adobe.cairngorm.control:FrontController/addCommand" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
      Registers a ICommand class with the Front Controller, against an event name
      and listens for events with that name.]]></shortDescription>
                           <params>
                              <param name="commandName" type="String"/>
                              <param name="commandRef" type="Class"/>
                              <param name="useWeakReference" type="Boolean" default="true"/>
                           </params>
                        </method>
                        <method name="removeCommand" fullname="com.adobe.cairngorm.control:FrontController/removeCommand" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
      Deregisters an ICommand class with the given event name from the Front Controller 
            ]]></shortDescription>
                           <params>
                              <param name="commandName" type="String"/>
                           </params>
                        </method>
                        <method name="executeCommand" fullname="com.adobe.cairngorm.control:FrontController/protected:executeCommand" accessLevel="protected" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
      Executes the command
      ]]></shortDescription>
                           <params>
                              <param name="event" type="com.adobe.cairngorm.control:CairngormEvent">
                                 <classRef name="CairngormEvent" fullName="com.adobe.cairngorm.control:CairngormEvent" packageName="com.adobe.cairngorm.control" relativePath="../../../adobe/cairngorm/control/CairngormEvent.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="getCommand" fullname="com.adobe.cairngorm.control:FrontController/protected:getCommand" accessLevel="protected" result_type="Class" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
      Returns the command class registered with the command name.]]></shortDescription>
                           <params>
                              <param name="commandName" type="String"/>
                           </params>
                        </method>
                     </methods>
                  </asAncestor>
               </asAncestors>
               <methods>
                  <method name="addSubController" fullname="com.universalmind.cairngorm.control:FrontController/addSubController" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
        This method allows classes of subControllers to be registered and instantiated
        Events registered with the subcontroller are "added" to the global event->command
        mappings. Events for subControllers are simply "forwarded" to that subController's
        event-mapping processor.
        
        ]]></description>
                     <shortDescription><![CDATA[
        This method allows classes of subControllers to be registered and instantiated
        Events registered with the subcontroller are "added" to the global event->command
        mappings.]]></shortDescription>
                     <versions/>
                     <result type="void"/>
                     <sees>
                        <see href="../control/ModuleController.html" label="com.universalmind.cairngorm.control.ModuleController"/>
                     </sees>
                     <params>
                        <param name="controllerRef" type="Class"/>
                     </params>
                     <customs>
                        <controllerRef><![CDATA[This is the class name of module controller that should be 
        instantiated and cached.
        
        ]]></controllerRef>
                     </customs>
                  </method>
               </methods>
            </asClass>
         </classes>
      </asPackage>
      <asPackage name="com.adobe.cairngorm.commands">
         <classes>
            <asClass name="SequenceCommand" type="class" fullname="com.adobe.cairngorm.commands:SequenceCommand" accessLevel="public" isFinal="false" isDynamic="false" packageName="com.adobe.cairngorm.commands" path="" relativePath="../" href="" taghref="" inheritDoc="false">
               <description><![CDATA[
    The SequenceCommand is provided as a "psuedo-abstract" (since ActionScript
    has no real concept of abstract classes) base-class that can be extended when
    you wish to chain commands together for a single user-gesture, or establish
    some simple form of decision-based workflow.
    
    <p>
    By extending SequenceCommand, you can specify the event that should be 
    broadcast to the controller (causing another command execution
    without a further user-gesture) when the current command has completed
    execution.
    </p>
        <p>
    For a command implementing the Responder interface, you may choose to
    sequence a subsequent command on successful completion of the command,
    in the onResult() handler, or on failure of the command in the onFault()
    method.
    </p>
        <p>
    For commands that do not implement the Responder interface, you can 
    simply chain commands by causing the sequenced command to be invoked
    as the last action in your command's execute() method.
    </p>
        <p>
    <b>Usage</b>
    </p>
        <p>
    In the constructor of a concrete SequenceCommand implementation, you
    should set nextEvent to the event that is responsible for calling your 
    subsequent command.
    </p>
    
    <p>
    Alternatively, you can override the implicit nextEvent getter, to 
    programmatically decide at runtime which event should be broadcast
    next.
    </p>
        <p>
    Invocation of the next command in the sequence is explicitly controlled by
    the developer, by calling the executeNextCommand() method provided in the
    SequenceCommand base-class.  This can be called either in the body of the execute() method
    (for synchronous sequencing) or in the body of an onResult() or onFault()
    handler (for asynchronous sequencing, that can also support conditional
    workflow).
    </p>
        ]]></description>
               <shortDescription><![CDATA[
    The SequenceCommand is provided as a "psuedo-abstract" (since ActionScript
    has no real concept of abstract classes) base-class that can be extended when
    you wish to chain commands together for a single user-gesture, or establish
    some simple form of decision-based workflow.]]></shortDescription>
               <versions/>
               <author/>
               <sees>
                  <see href="" label="com.adobe.cairngorm.commands.ICommand"/>
                  <see href="../control/CairngormEventDispatcher.html" label="com.adobe.cairngorm.control.CairngormEventDispatcher"/>
               </sees>
               <asAncestors/>
               <asImplements>
                  <asAncestor>
                     <classRef name="com.adobe.cairngorm.commands.ICommand" fullName="com.adobe.cairngorm.commands.ICommand" relativePath="none"/>
                  </asAncestor>
               </asImplements>
               <constructors>
                  <constructor name="SequenceCommand" fullname="com.adobe.cairngorm.commands:SequenceCommand/SequenceCommand" accessLevel="public" result_type="void" inheritDoc="false">
                     <description><![CDATA[
       Constructor, with optional nextEvent.
       ]]></description>
                     <shortDescription><![CDATA[
       Constructor, with optional nextEvent.]]></shortDescription>
                     <versions/>
                     <result type="void"/>
                     <params>
                        <param name="nextEvent" type="com.adobe.cairngorm.control:CairngormEvent" default="null">
                           <classRef name="CairngormEvent" fullName="com.adobe.cairngorm.control:CairngormEvent" packageName="com.adobe.cairngorm.control" relativePath="../control/CairngormEvent.html"/>
                        </param>
                     </params>
                  </constructor>
               </constructors>
               <methods>
                  <method name="execute" fullname="com.adobe.cairngorm.commands:SequenceCommand/execute" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[ 
       Abstract implementation of the execute() method.
              <p>ActionScript does not explicity support abstract methods and abstract classes, so this concrete 
       implementation of the interface method must be overridden by the developer.</p>
       
       ]]></description>
                     <shortDescription><![CDATA[ 
       Abstract implementation of the execute() method.]]></shortDescription>
                     <versions/>
                     <result type="void"/>
                     <params>
                        <param name="event" type="com.adobe.cairngorm.control:CairngormEvent">
                           <classRef name="CairngormEvent" fullName="com.adobe.cairngorm.control:CairngormEvent" packageName="com.adobe.cairngorm.control" relativePath="../control/CairngormEvent.html"/>
                        </param>
                     </params>
                  </method>
                  <method name="executeNextCommand" fullname="com.adobe.cairngorm.commands:SequenceCommand/executeNextCommand" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
       Call to execute the next command in the sequence.
       
       <p>Called explicitly by the developer within a concrete SequenceCommand implementation, this method causes the
       event registered with nextEvent to be broadcast, for the next command in the sequence to be called 
       without further user-gesture.</p>
       
       ]]></description>
                     <shortDescription><![CDATA[
       Call to execute the next command in the sequence.]]></shortDescription>
                     <versions/>
                     <result type="void"/>
                  </method>
               </methods>
               <fields>
                  <field name="nextEvent" fullname="com.adobe.cairngorm.commands:SequenceCommand/nextEvent" accessLevel="public" type="com.adobe.cairngorm.control:CairngormEvent" isConst="false" isStatic="false">
                     <classRef name="CairngormEvent" fullName="com.adobe.cairngorm.control:CairngormEvent" packageName="com.adobe.cairngorm.control" relativePath="../control/CairngormEvent.html"/>
                     <description><![CDATA[
       The next event in the sequence.
       ]]></description>
                     <shortDescription><![CDATA[
       The next event in the sequence.]]></shortDescription>
                     <versions/>
                  </field>
               </fields>
            </asClass>
         </classes>
      </asPackage>
      <asPackage name="com.adobe.cairngorm.control">
         <classes>
            <asClass name="CairngormEventDispatcher" type="class" fullname="com.adobe.cairngorm.control:CairngormEventDispatcher" accessLevel="public" isFinal="false" isDynamic="false" packageName="com.adobe.cairngorm.control" path="" relativePath="../" href="" taghref="" inheritDoc="false">
               <description><![CDATA[
    The CairngormEventDispatcher class is a singleton class, used by the application
    developer to broadcast events that correspond to user gestures and requests.
        <p>The singleton implementation of the CairngormEventDispatcher ensures that one
    and only one class can be responsible for broadcasting events that the
    FrontController is subscribed to listen and react to.</p>
        <p>
    Since the CairngormEventDispatcher implements singleton access, use of the
    singleton is simple to distribute throughout your application.  At
    any point in your application, should you capture a user gesture
    (such as in a click handler, or a dragComplete handler, etc) then
    simply use a code idiom as follows:
    </p>
        <pre>
    //LoginEvent inherits from com.adobe.cairngorm.control.CairngormEvent
    var eventObject : LoginEvent = new LoginEvent();
    eventObject.username = username.text;
    eventObject.password = username.password;
    
    CairngormEventDispatcher.getInstance().dispatchEvent( eventObject );
    </pre>
        ]]></description>
               <shortDescription><![CDATA[
    The CairngormEventDispatcher class is a singleton class, used by the application
    developer to broadcast events that correspond to user gestures and requests.]]></shortDescription>
               <versions/>
               <author/>
               <sees>
                  <see href="../control/FrontController.html" label="com.adobe.cairngorm.control.FrontController"/>
                  <see href="../control/CairngormEvent.html" label="com.adobe.cairngorm.control.CairngormEvent"/>
                  <see href="" label="flash.events.IEventDispatcher"/>
               </sees>
               <asAncestors/>
               <constructors>
                  <constructor name="CairngormEventDispatcher" fullname="com.adobe.cairngorm.control:CairngormEventDispatcher/CairngormEventDispatcher" accessLevel="public" result_type="*" inheritDoc="false">
                     <description><![CDATA[
       Constructor.
       ]]></description>
                     <shortDescription><![CDATA[
       Constructor.]]></shortDescription>
                     <versions/>
                     <result type="*"/>
                     <params>
                        <param name="target" type="flash.events:IEventDispatcher" default="null"/>
                     </params>
                  </constructor>
               </constructors>
               <methods>
                  <method name="getInstance" fullname="com.adobe.cairngorm.control:CairngormEventDispatcher/getInstance" accessLevel="public" result_type="com.adobe.cairngorm.control:CairngormEventDispatcher" isFinal="false" isOverride="false" isStatic="true" inheritDoc="false">
                     <description><![CDATA[
       Returns the single instance of the dispatcher
       ]]></description>
                     <shortDescription><![CDATA[
       Returns the single instance of the dispatcher
       ]]></shortDescription>
                     <versions/>
                     <result type="com.adobe.cairngorm.control:CairngormEventDispatcher">
                        <classRef name="CairngormEventDispatcher" fullName="com.adobe.cairngorm.control:CairngormEventDispatcher" packageName="com.adobe.cairngorm.control" relativePath="../control/CairngormEventDispatcher.html"/>
                     </result>
                  </method>
                  <method name="addEventListener" fullname="com.adobe.cairngorm.control:CairngormEventDispatcher/addEventListener" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
       Adds an event listener.
       ]]></description>
                     <shortDescription><![CDATA[
       Adds an event listener.]]></shortDescription>
                     <versions/>
                     <result type="void"/>
                     <params>
                        <param name="type" type="String"/>
                        <param name="listener" type="Function"/>
                        <param name="useCapture" type="Boolean" default="false"/>
                        <param name="priority" type="int" default="0"/>
                        <param name="useWeakReference" type="Boolean" default="false"/>
                     </params>
                  </method>
                  <method name="removeEventListener" fullname="com.adobe.cairngorm.control:CairngormEventDispatcher/removeEventListener" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
       Removes an event listener.
       ]]></description>
                     <shortDescription><![CDATA[
       Removes an event listener.]]></shortDescription>
                     <versions/>
                     <result type="void"/>
                     <params>
                        <param name="type" type="String"/>
                        <param name="listener" type="Function"/>
                        <param name="useCapture" type="Boolean" default="false"/>
                     </params>
                  </method>
                  <method name="dispatchEvent" fullname="com.adobe.cairngorm.control:CairngormEventDispatcher/dispatchEvent" accessLevel="public" result_type="Boolean" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
       Dispatches a cairngorm event.
       ]]></description>
                     <shortDescription><![CDATA[
       Dispatches a cairngorm event.]]></shortDescription>
                     <versions/>
                     <result type="Boolean"/>
                     <params>
                        <param name="event" type="com.adobe.cairngorm.control:CairngormEvent">
                           <classRef name="CairngormEvent" fullName="com.adobe.cairngorm.control:CairngormEvent" packageName="com.adobe.cairngorm.control" relativePath="CairngormEvent.html"/>
                        </param>
                     </params>
                  </method>
                  <method name="hasEventListener" fullname="com.adobe.cairngorm.control:CairngormEventDispatcher/hasEventListener" accessLevel="public" result_type="Boolean" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
       Returns whether an event listener exists.
       ]]></description>
                     <shortDescription><![CDATA[
       Returns whether an event listener exists.]]></shortDescription>
                     <versions/>
                     <result type="Boolean"/>
                     <params>
                        <param name="type" type="String"/>
                     </params>
                  </method>
                  <method name="willTrigger" fullname="com.adobe.cairngorm.control:CairngormEventDispatcher/willTrigger" accessLevel="public" result_type="Boolean" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
       Returns whether an event will trigger.
       ]]></description>
                     <shortDescription><![CDATA[
       Returns whether an event will trigger.]]></shortDescription>
                     <versions/>
                     <result type="Boolean"/>
                     <params>
                        <param name="type" type="String"/>
                     </params>
                  </method>
               </methods>
            </asClass>
            <asClass name="FrontController" type="class" fullname="com.adobe.cairngorm.control:FrontController" accessLevel="public" isFinal="false" isDynamic="false" packageName="com.adobe.cairngorm.control" path="" relativePath="../" href="" taghref="" inheritDoc="false">
               <description><![CDATA[
    A base class for an application specific front controller,
    that is able to dispatch control following particular user gestures to appropriate
    command classes.
        <p>
    The Front Controller is the centralised request handling class in a
    Cairngorm application.  Throughout the application architecture are
    scattered a number of CairngormEventDispatcher.getInstance().dispatchEvent( event )
    method calls, that signal to the listening controller that a user gesture
    has occured.
    </p>
        <p>
    The role of the Front Controller is to first register all the different
    events that it is capable of handling against worker classes, called
    command classes.  On hearing an application event, the Front Controller
    will look up its table of registered events, find the appropriate
    command for handling of the event, before dispatching control to the
    command by calling its execute() method.
    </p>
        <p>
    Commands are added to the front controller with a weak reference,
    meaning that when the command is garbage collected, the reference in
    the controller is also garbage collected.
    </p>
    
    <p>
    The Front Controller is a base-class that  listen for events 
    dispatched by CairngormEventDispatcher.  In a 
    Cairngorm application, the developer should create a class that
    extends the FrontController, and in the constructor of their
    application specific controller, they should make numerous calls to
    addCommand() to register all the expected events with application
    specific command classes.
    </p>
        <p>
    Consider a LoginController, that is the main controller for a Login
    application that has 2 user gestures - Login and Logout.  The application
    will have 2 buttons, "Login" and "Logout" and in the click handler for
    each button, one of the following methods is executed:
    </p>
        <pre>
    public function doLogin() : void
    {
       var event : LoginEvent = new LoginEvent( username.text, password.text );
       CairngormEventDispatcher.getInstance.dispatchEvent( event );
    }
    
    public function doLogout() : void
    {
       var event : LogoutEvent = new LogoutEvent();
       CairngormEventDispatcher.getInstance.dispatchEvent( event );
    }
    </pre>
    
    <p>
    We would create LoginController as follows:
    </p>
        <pre>
    class LoginController extends com.adobe.cairngorm.control.FrontController
    {
       public function LoginController()
       {
          initialiseCommands();
       }
    
       public function initialiseCommands() : void
       {
          addCommand( LoginEvent.EVENT_LOGIN, LoginCommand );
          addCommand( LogoutEvent.EVENT_LOGOUT, LogoutCommand );
       }
      
    }
    </pre>
        <p>
    In our concrete implementation of a FrontController, LoginController, we
    register the 2 events that are expected for broadcast - login and logout -
    using the addCommand() method of the parent FrontController class, to
    assign a command class to each event.
    </p>
        <p>
    Adding a new use-case to a Cairngorm application is as simple as
    registering the event against a command in the application Front Controller,
    and then creating the concrete command class.
    </p>
    
    <p>
    The concrete implementation of the FrontController, LoginController,
    should be created once and once only (as we only want a single controller
    in our application architecture).  Typically, in our main application, we
    would declare our FrontController child class as a tag, which should be placed
    above any tags which have a dependency on the FrontController
    </p>
        <pre>
    &lt;mx:Application  xmlns:control="com.domain.project.control.LoginController"   ... &gt;
          &lt;control:LoginController id="controller" /&gt;
         ...
    
    </pre>
        ]]></description>
               <shortDescription><![CDATA[
    A base class for an application specific front controller,
    that is able to dispatch control following particular user gestures to appropriate
    command classes.]]></shortDescription>
               <versions/>
               <author/>
               <sees>
                  <see href="" label="com.adobe.cairngorm.commands.ICommand"/>
               </sees>
               <asDecendants>
                  <classRef name="BaseController" fullName="com.universalmind.cairngorm.control:BaseController" packageName="com.universalmind.cairngorm.control" relativePath="../../../universalmind/cairngorm/control/BaseController.html"/>
               </asDecendants>
               <asAncestors/>
               <methods>
                  <method name="addCommand" fullname="com.adobe.cairngorm.control:FrontController/addCommand" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
      Registers a ICommand class with the Front Controller, against an event name
      and listens for events with that name.
            <p>When an event is broadcast that matches commandName,
      the ICommand class referred to by commandRef receives control of the
      application, by having its execute() method invoked.</p>
            ]]></description>
                     <shortDescription><![CDATA[
      Registers a ICommand class with the Front Controller, against an event name
      and listens for events with that name.]]></shortDescription>
                     <versions/>
                     <result type="void"/>
                     <params>
                        <param name="commandName" type="String">
                           <description><![CDATA[The name of the event that will be broadcast by the
      when a particular user gesture occurs, eg "login"
            ]]></description>
                        </param>
                        <param name="commandRef" type="Class">
                           <description><![CDATA[An ICommand Class reference upon which execute()
      can be called when the Front Controller hears an event broadcast with
      commandName. Typically, this argument is passed as "LoginCommand" 
      or similar.
      
      ]]></description>
                        </param>
                        <param name="useWeakReference" type="Boolean" default="true">
                           <description><![CDATA[A Boolean indicating whether the controller
      should added as a weak reference to the CairngormEventDispatcher,
      meaning it will eligibile for garbage collection if it is unloaded from 
      the main application.
      ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="removeCommand" fullname="com.adobe.cairngorm.control:FrontController/removeCommand" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
      Deregisters an ICommand class with the given event name from the Front Controller 
            ]]></description>
                     <shortDescription><![CDATA[
      Deregisters an ICommand class with the given event name from the Front Controller 
            ]]></shortDescription>
                     <versions/>
                     <result type="void"/>
                     <params>
                        <param name="commandName" type="String">
                           <description><![CDATA[The name of the event that will be broadcast by the
      when a particular user gesture occurs, eg "login"
            ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="executeCommand" fullname="com.adobe.cairngorm.control:FrontController/protected:executeCommand" accessLevel="protected" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
      Executes the command
      ]]></description>
                     <shortDescription><![CDATA[
      Executes the command
      ]]></shortDescription>
                     <versions/>
                     <result type="void"/>
                     <params>
                        <param name="event" type="com.adobe.cairngorm.control:CairngormEvent">
                           <classRef name="CairngormEvent" fullName="com.adobe.cairngorm.control:CairngormEvent" packageName="com.adobe.cairngorm.control" relativePath="CairngormEvent.html"/>
                        </param>
                     </params>
                  </method>
                  <method name="getCommand" fullname="com.adobe.cairngorm.control:FrontController/protected:getCommand" accessLevel="protected" result_type="Class" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
      Returns the command class registered with the command name. 
      ]]></description>
                     <shortDescription><![CDATA[
      Returns the command class registered with the command name.]]></shortDescription>
                     <versions/>
                     <result type="Class"/>
                     <params>
                        <param name="commandName" type="String"/>
                     </params>
                  </method>
               </methods>
               <fields>
                  <field name="commands" fullname="com.adobe.cairngorm.control:FrontController/protected:commands" accessLevel="protected" type="flash.utils:Dictionary" isConst="false" isStatic="false" defaultValue="">
                     <description><![CDATA[
      Dictionary of event name to command class mappings
      ]]></description>
                     <shortDescription><![CDATA[
      Dictionary of event name to command class mappings
      ]]></shortDescription>
                     <versions/>
                  </field>
               </fields>
            </asClass>
            <asClass name="CairngormEvent" type="class" fullname="com.adobe.cairngorm.control:CairngormEvent" accessLevel="public" isFinal="false" isDynamic="false" packageName="com.adobe.cairngorm.control" path="" relativePath="../" href="" taghref="" inheritDoc="false">
               <description><![CDATA[
    The CairngormEvent class is used to differentiate Cairngorm events 
    from events raised by the underlying Flex framework (or
    similar). It is mandatory for Cairngorm event dispatching. 
    
    <p>For more information on how event dispatching works in Cairngorm, 
    please check with CairngormEventDispatcher.</p>
    <p>
    Events are typically broadcast as the result of a user gesture occuring
    in the application, such as a button click, a menu selection, a double
    click, a drag and drop operation, etc.  
    </p>
        ]]></description>
               <shortDescription><![CDATA[
    The CairngormEvent class is used to differentiate Cairngorm events 
    from events raised by the underlying Flex framework (or
    similar).]]></shortDescription>
               <versions/>
               <author/>
               <sees>
                  <see href="../control/CairngormEventDispatcher.html" label="com.adobe.cairngorm.control.CairngormEventDispatcher"/>
               </sees>
               <asDecendants>
                  <classRef name="UMEvent" fullName="com.universalmind.cairngorm.events:UMEvent" packageName="com.universalmind.cairngorm.events" relativePath="../../../universalmind/cairngorm/events/UMEvent.html"/>
               </asDecendants>
               <asAncestors>
                  <asAncestor>
                     <classRef name="flash.events.Event" fullName="flash.events.Event" relativePath="none"/>
                  </asAncestor>
               </asAncestors>
               <constructors>
                  <constructor name="CairngormEvent" fullname="com.adobe.cairngorm.control:CairngormEvent/CairngormEvent" accessLevel="public" result_type="*" inheritDoc="false">
                     <description><![CDATA[
       Constructor, takes the event name (type) and data object (defaults to null)
       and also defaults the standard Flex event properties bubbles and cancelable
       to true and false respectively.
       ]]></description>
                     <shortDescription><![CDATA[
       Constructor, takes the event name (type) and data object (defaults to null)
       and also defaults the standard Flex event properties bubbles and cancelable
       to true and false respectively.]]></shortDescription>
                     <versions/>
                     <result type="*"/>
                     <params>
                        <param name="type" type="String"/>
                        <param name="bubbles" type="Boolean" default="false"/>
                        <param name="cancelable" type="Boolean" default="false"/>
                     </params>
                  </constructor>
               </constructors>
               <methods>
                  <method name="dispatch" fullname="com.adobe.cairngorm.control:CairngormEvent/dispatch" accessLevel="public" result_type="Boolean" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
       Dispatch this event via the Cairngorm event dispatcher.
       ]]></description>
                     <shortDescription><![CDATA[
       Dispatch this event via the Cairngorm event dispatcher.]]></shortDescription>
                     <versions/>
                     <result type="Boolean"/>
                  </method>
               </methods>
               <fields>
                  <field name="data" fullname="com.adobe.cairngorm.control:CairngormEvent/data" accessLevel="public" type="" isConst="false" isStatic="false">
                     <description><![CDATA[
       The data property can be used to hold information to be passed with the event
       in cases where the developer does not want to extend the CairngormEvent class.
       However, it is recommended that specific classes are created for each type
       of event to be dispatched.
       ]]></description>
                     <shortDescription><![CDATA[
       The data property can be used to hold information to be passed with the event
       in cases where the developer does not want to extend the CairngormEvent class.]]></shortDescription>
                     <versions/>
                  </field>
               </fields>
            </asClass>
         </classes>
      </asPackage>
      <asPackage name="com.universalmind.cairngorm.commands">
         <classes>
            <asClass name="Command" type="class" fullname="com.universalmind.cairngorm.commands:Command" accessLevel="public" isFinal="false" isDynamic="false" packageName="com.universalmind.cairngorm.commands" path="" relativePath="../" href="" taghref="" inheritDoc="false">
               <description><![CDATA[
    A base class used by developers to (a) allow a single command class to manage multiple events, 
    (b) provide easy notifications to callers, (c) allows commands to dispatch business events,
    and (d) allows data to be easily cached for calls to delegates or remote services. 
    
    Using the Callbacks class, ANY caller can serve as an Responder without implementing 
    the IResponder interface(s). Using the UMEvent class, any such event recieved at the 
    Command instance can contain optional information that will be used later for caller notifications.
        ]]></description>
               <shortDescription><![CDATA[
    A base class used by developers to (a) allow a single command class to manage multiple events, 
    (b) provide easy notifications to callers, (c) allows commands to dispatch business events,
    and (d) allows data to be easily cached for calls to delegates or remote services.]]></shortDescription>
               <versions/>
               <author/>
               <example><![CDATA[This example demonstrates how the Command class can be subclass and used properly.
    
    <listing version="3.0">
       public class LoginCommand extends Command {
    
          override public function execute(event:CairngormEvent):void {
              // always call the super.execute() method which allows the 
              // callBack information to be cached.
    
              super.execute(event);
    
              switch(event.type) {
                   case LoginUserEvent.EVENT_ID  :  doLogin(event as LoginUserEvent);  break;
                   case LogoutUserEvent.EVENT_ID :  doLogout(event as LogoutUserEvent); break;
              }
          }
    
          private function doLogin(event:LoginUserEvent)  :void {  
                var handlers : Callbacks     = new Callbacks(onResults_doLogin,onFault);
                var delegate : LoginDelegate = new LoginDelegate(handlers);
    
       delegate.login(event.userID,event.password);
       }
          private function doLogout(event:LogoutUserEvent):void { ; }
    
          //           // DataService Result Handlers
          //     
          private function onResults_doLogin(event::void {
                __model.user = (event.result as UserVO);
          }
    
          private var __model : ModelLocator = ModelLocator.getInstance();
       }
    </listing>
    
    ]]></example>
               <sees>
                  <see href="../events/Callbacks.html" label="com.universalmind.cairngorm.events.Callbacks"/>
                  <see href="../events/UMEvent.html" label="com.universalmind.cairngorm.events.UMEvent"/>
               </sees>
               <asAncestors/>
               <asImplements>
                  <asAncestor>
                     <classRef name="com.adobe.cairngorm.commands.ICommand" fullName="com.adobe.cairngorm.commands.ICommand" relativePath="none"/>
                  </asAncestor>
                  <asAncestor>
                     <classRef name="mx.rpc.IResponder" fullName="mx.rpc.IResponder" relativePath="none"/>
                  </asAncestor>
               </asImplements>
               <methods>
                  <method name="execute" fullname="com.universalmind.cairngorm.commands:Command/execute" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[ 
       This function allows the incoming event to "cache" optional caller notification details.
       Note: this method is overridden by the subclass; and should always be called by the subclass.
       
       ]]></description>
                     <shortDescription><![CDATA[ 
       This function allows the incoming event to "cache" optional caller notification details.]]></shortDescription>
                     <versions/>
                     <result type="void"/>
                     <params>
                        <param name="event" type="com.adobe.cairngorm.control:CairngormEvent">
                           <classRef name="CairngormEvent" fullName="com.adobe.cairngorm.control:CairngormEvent" packageName="com.adobe.cairngorm.control" relativePath="../../../adobe/cairngorm/control/CairngormEvent.html"/>
                           <description><![CDATA[The event that was dispatched by a caller and recieved by an instance of the command subclass.
       ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="dispatchEvent" fullname="com.universalmind.cairngorm.commands:Command/dispatchEvent" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <event name="This">
                        <description>a new business event that should be dispatched; and may be handled by the same class
     or by another completely separate command subclass instance.</description>
                     </event>
                     <description><![CDATA[
     This method allows commands to dispatch business events. This functionality allows commands to 
     to decoupled and provides better cohesion for inter-command activity.
     
     ]]></description>
                     <shortDescription><![CDATA[
     This method allows commands to dispatch business events.]]></shortDescription>
                     <versions/>
                     <result type="void"/>
                     <sees>
                        <see href="" label="com.universalmind.cairngorm.FrontController"/>
                     </sees>
                     <params>
                        <param name="event" type="com.adobe.cairngorm.control:CairngormEvent">
                           <classRef name="CairngormEvent" fullName="com.adobe.cairngorm.control:CairngormEvent" packageName="com.adobe.cairngorm.control" relativePath="../../../adobe/cairngorm/control/CairngormEvent.html"/>
                        </param>
                     </params>
                  </method>
                  <method name="notifyCaller" fullname="com.universalmind.cairngorm.commands:Command/notifyCaller" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[ 
       This method allows callers (if originally packaged with the incoming event) to be receive a notification of response.
       
       <p>
       Conventional Cairngorm MVC solutions use the ModelLocator as a global repository and views {bind} to variables
       exposed within the ModelLocator instance. Often, as enterprise needs scale the complexity of the applicaiton,
       view instances need proprietary data that should not be shared nor contained within the ModelLocator. Direct "caller notification"
       from command instances allow commands to deliver data [aka "notify"] to views or callers. The Callbacks class allows the
       command to ignore any coupling issues regarding datatypes of the caller.
       </p>
        
       ]]></description>
                     <shortDescription><![CDATA[ 
       This method allows callers (if originally packaged with the incoming event) to be receive a notification of response.]]></shortDescription>
                     <versions/>
                     <result type="void"/>
                     <sees>
                        <see href="../events/Callbacks.html" label="com.universalmind.cairngorm.events.Callbacks"/>
                     </sees>
                     <params>
                        <param name="results" type="" default="null"/>
                     </params>
                     <customs>
                        <results><![CDATA[This is any data type that should be provided to the caller. If the type is a faultEvent, then the caller's faultHandler is invoked.
       All other data types (including scalar values) are delivered to the caller by invoking its resultHandler.
       
       ]]></results>
                     </customs>
                  </method>
                  <method name="cacheCaller" fullname="com.universalmind.cairngorm.commands:Command/protected:cacheCaller" accessLevel="protected" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <event name="If">
                        <description>event is an UMEvent subclass, then IResponder handlers [optional] are cached for future use.</description>
                     </event>
                     <description><![CDATA[ 
       This method caches optional callers response handlers so callers can later receive a notification of response.
       
       <p>
       Normally this method is called by Command subclasses calling super.execute(). 
       However, manual invocation of this method is also supported.
       </p>
        
       ]]></description>
                     <shortDescription><![CDATA[ 
       This method caches optional callers response handlers so callers can later receive a notification of response.]]></shortDescription>
                     <versions/>
                     <result type="void"/>
                     <sees>
                        <see href="../events/Callbacks.html" label="com.universalmind.cairngorm.events.Callbacks"/>
                        <see href="../events/UMEvent.html" label="com.universalmind.cairngorm.events.UMEvent"/>
                     </sees>
                     <params>
                        <param name="event" type="flash.events:Event"/>
                     </params>
                  </method>
                  <method name="result" fullname="com.universalmind.cairngorm.commands:Command/result" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
        Method required to allow Commands to support the "result" response for the IResponder interfaces.
        Support of the IResponder interface allows command instances to use either Callbacks as proxy Responders or the command instance itself to 
        serve as the responder to a delegate or remote dataservice call.
        
        ]]></description>
                     <shortDescription><![CDATA[
        Method required to allow Commands to support the "result" response for the IResponder interfaces.]]></shortDescription>
                     <versions/>
                     <result type="void"/>
                     <sees>
                        <see href="" label="mx.rpc.IResponder"/>
                     </sees>
                     <params>
                        <param name="info" type="Object"/>
                     </params>
                     <customs>
                        <info><![CDATA[The object that is returned as the Result of the [usually] asychronous call.
        
        ]]></info>
                     </customs>
                  </method>
                  <method name="fault" fullname="com.universalmind.cairngorm.commands:Command/fault" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
        Method required to allow Commands to support the "fault" response for the IResponder interfaces.
        Support of the IResponder interface allows command instances to use either Callbacks as proxy Responders or the command instance itself to 
        serve as the responder to a delegate or remote dataservice call.
        
        ]]></description>
                     <shortDescription><![CDATA[
        Method required to allow Commands to support the "fault" response for the IResponder interfaces.]]></shortDescription>
                     <versions/>
                     <result type="void"/>
                     <sees>
                        <see href="" label="mx.rpc.IResponder"/>
                     </sees>
                     <params>
                        <param name="info" type="Object"/>
                     </params>
                     <customs>
                        <info><![CDATA[The object that is returned as the Result of the [usually] asychronous call.
        
        ]]></info>
                     </customs>
                  </method>
                  <method name="onFault" fullname="com.universalmind.cairngorm.commands:Command/onFault" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
       Utility method to allow command subclasses to use a shared method for "fault" respones.
       ]]></description>
                     <shortDescription><![CDATA[
       Utility method to allow command subclasses to use a shared method for "fault" respones.]]></shortDescription>
                     <versions/>
                     <result type="void"/>
                     <params>
                        <param name="info" type="Object"/>
                     </params>
                  </method>
                  <method name="buildTokenOptions" fullname="com.universalmind.cairngorm.commands:Command/protected:buildTokenOptions" accessLevel="protected" result_type="Command.as$30:TokenOptions" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Method to allow commands to gather information for caching during asynchronous calls.
   After the asynchronous RDS is dispatched, this preserves all information for access by 
   the result/fault handlers... if needed.
   
   ]]></description>
                     <shortDescription><![CDATA[
   Method to allow commands to gather information for caching during asynchronous calls.]]></shortDescription>
                     <versions/>
                     <result type="Command.as$30:TokenOptions"/>
                     <params>
                        <param name="details" type=""/>
                     </params>
                     <customs>
                        <details><![CDATA[This is an associative array [aka Object] that contains key/value pairs of information.
   ]]></details>
                     </customs>
                  </method>
                  <method name="getTokenOption" fullname="com.universalmind.cairngorm.commands:Command/protected:getTokenOption" accessLevel="protected" result_type="*" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <event name="This">
                        <description>the asynchronous response event (FaultEvent or ResultEvent) that may have TokenOptions cached.</description>
                     </event>
                     <description><![CDATA[
    This utility method provides an easy lookup of an token-cached value; to be retrieved by key/name
    
    ]]></description>
                     <shortDescription><![CDATA[
    This utility method provides an easy lookup of an token-cached value; to be retrieved by key/name
    
    ]]></shortDescription>
                     <versions/>
                     <result type="*"/>
                     <params>
                        <param name="event" type="flash.events:Event"/>
                        <param name="key" type="String"/>
                     </params>
                     <customs>
                        <key><![CDATA[  This is the key/name used to lookup the value cached in the TokeOptions array.
    
    ]]></key>
                     </customs>
                  </method>
               </methods>
            </asClass>
         </classes>
      </asPackage>
      <asPackage name="com.adobe.cairngorm">
         <classes>
            <asClass name="CairngormMessageCodes" type="class" fullname="com.adobe.cairngorm:CairngormMessageCodes" accessLevel="public" isFinal="false" isDynamic="false" packageName="com.adobe.cairngorm" path="" relativePath="../" href="" taghref="" inheritDoc="false">
               <description><![CDATA[
  Stores Cairngorm message codes.
  
  <p>All messages/error codes must match the regular expression:
    C\d{4}[EWI]
    1. The application prefix e.g. 'C'.
  
  2. A four-digit error code that must be unique.
  
  3. A single character severity indicator
     (E: error, W: warning, I: informational).</p>
  ]]></description>
               <shortDescription><![CDATA[
  Stores Cairngorm message codes.]]></shortDescription>
               <versions/>
               <author/>
               <asAncestors/>
               <fields>
                  <field name="SINGLETON_EXCEPTION" fullname="com.adobe.cairngorm:CairngormMessageCodes/SINGLETON_EXCEPTION" accessLevel="public" type="String" isConst="true" isStatic="true" defaultValue="C0001E">
                     <versions/>
                  </field>
                  <field name="SERVICE_NOT_FOUND" fullname="com.adobe.cairngorm:CairngormMessageCodes/SERVICE_NOT_FOUND" accessLevel="public" type="String" isConst="true" isStatic="true" defaultValue="C0002E">
                     <versions/>
                  </field>
                  <field name="COMMAND_ALREADY_REGISTERED" fullname="com.adobe.cairngorm:CairngormMessageCodes/COMMAND_ALREADY_REGISTERED" accessLevel="public" type="String" isConst="true" isStatic="true" defaultValue="C0003E">
                     <versions/>
                  </field>
                  <field name="COMMAND_NOT_FOUND" fullname="com.adobe.cairngorm:CairngormMessageCodes/COMMAND_NOT_FOUND" accessLevel="public" type="String" isConst="true" isStatic="true" defaultValue="C0004E">
                     <versions/>
                  </field>
                  <field name="VIEW_ALREADY_REGISTERED" fullname="com.adobe.cairngorm:CairngormMessageCodes/VIEW_ALREADY_REGISTERED" accessLevel="public" type="String" isConst="true" isStatic="true" defaultValue="C0005E">
                     <versions/>
                  </field>
                  <field name="VIEW_NOT_FOUND" fullname="com.adobe.cairngorm:CairngormMessageCodes/VIEW_NOT_FOUND" accessLevel="public" type="String" isConst="true" isStatic="true" defaultValue="C0006E">
                     <versions/>
                  </field>
                  <field name="REMOTE_OBJECT_NOT_FOUND" fullname="com.adobe.cairngorm:CairngormMessageCodes/REMOTE_OBJECT_NOT_FOUND" accessLevel="public" type="String" isConst="true" isStatic="true" defaultValue="C0007E">
                     <versions/>
                  </field>
                  <field name="HTTP_SERVICE_NOT_FOUND" fullname="com.adobe.cairngorm:CairngormMessageCodes/HTTP_SERVICE_NOT_FOUND" accessLevel="public" type="String" isConst="true" isStatic="true" defaultValue="C0008E">
                     <versions/>
                  </field>
                  <field name="WEB_SERVICE_NOT_FOUND" fullname="com.adobe.cairngorm:CairngormMessageCodes/WEB_SERVICE_NOT_FOUND" accessLevel="public" type="String" isConst="true" isStatic="true" defaultValue="C0009E">
                     <versions/>
                  </field>
                  <field name="CONSUMER_NOT_FOUND" fullname="com.adobe.cairngorm:CairngormMessageCodes/CONSUMER_NOT_FOUND" accessLevel="public" type="String" isConst="true" isStatic="true" defaultValue="C0010E">
                     <versions/>
                  </field>
                  <field name="PRODUCER_NOT_FOUND" fullname="com.adobe.cairngorm:CairngormMessageCodes/PRODUCER_NOT_FOUND" accessLevel="public" type="String" isConst="true" isStatic="true" defaultValue="C0012E">
                     <versions/>
                  </field>
                  <field name="DATA_SERVICE_NOT_FOUND" fullname="com.adobe.cairngorm:CairngormMessageCodes/DATA_SERVICE_NOT_FOUND" accessLevel="public" type="String" isConst="true" isStatic="true" defaultValue="C0013E">
                     <versions/>
                  </field>
                  <field name="ABSTRACT_METHOD_CALLED" fullname="com.adobe.cairngorm:CairngormMessageCodes/ABSTRACT_METHOD_CALLED" accessLevel="public" type="String" isConst="true" isStatic="true" defaultValue="C0014E">
                     <versions/>
                  </field>
                  <field name="COMMAND_NOT_REGISTERED" fullname="com.adobe.cairngorm:CairngormMessageCodes/COMMAND_NOT_REGISTERED" accessLevel="public" type="String" isConst="true" isStatic="true" defaultValue="C0015E">
                     <versions/>
                  </field>
               </fields>
            </asClass>
            <asClass name="CairngormError" type="class" fullname="com.adobe.cairngorm:CairngormError" accessLevel="public" isFinal="false" isDynamic="false" packageName="com.adobe.cairngorm" path="" relativePath="../" href="" taghref="" inheritDoc="false">
               <description><![CDATA[
  Error class thrown when a Cairngorm error occurs.
  Used to substitute data in error messages.
  ]]></description>
               <shortDescription><![CDATA[
  Error class thrown when a Cairngorm error occurs.]]></shortDescription>
               <versions/>
               <author/>
               <asAncestors>
                  <asAncestor>
                     <classRef name="Error" fullName="Error" relativePath="none"/>
                  </asAncestor>
               </asAncestors>
               <constructors>
                  <constructor name="CairngormError" fullname="com.adobe.cairngorm:CairngormError/CairngormError" accessLevel="public" result_type="*" inheritDoc="false">
                     <versions/>
                     <result type="*"/>
                     <params>
                        <param name="errorCode" type="String"/>
                        <param name="rest" type="restParam"/>
                     </params>
                  </constructor>
               </constructors>
               <fields>
                  <field name="resourceBundle" fullname="com.adobe.cairngorm:CairngormError/protected:resourceBundle/get" accessLevel="protected" isConst="false" isStatic="false" type="mx.resources:ResourceBundle" inheritDoc="false" only="read">
                     <versions/>
                  </field>
               </fields>
            </asClass>
         </classes>
      </asPackage>
   </packages>
</asdoc>