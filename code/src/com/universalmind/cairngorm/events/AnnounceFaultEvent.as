/*

Copyright (c) 2007. Universal Mind, Inc. 
All rights reserved.
 
This source code is the property of Universal Mind, Inc. ("Universal Mind")
and is licensed, not sold or assigned, to the Universal Mind customer that
obtains this code from Universal Mind. 

  * This code may not be disclosed to any party without the prior written 
    consent of Universal Mind.
  * This code and may only be used as permitted in the agreement between 
    Universal Mind and its customer.

This code contains the valuable trade secrets of Universal Mind, the
development of which required the expenditure of considerable time and money.
Unless otherwise expressly set forth in the agreement between Universal
Mind and its customer, this code is provided "as-is" without warranty of
any kind.

Author: Thomas Burleson, Principal Architect
        ThomasB@UniversalMind.com
@ignore
*/
package com.universalmind.cairngorm.events
{
    import flash.events.Event;
    
    import mx.rpc.Fault;
    
   /**
    * The UMEvent class is used to differentiate Cairngorm events 
    * from events raised by the underlying Flex framework (or even the standard CairngormEvent)
    * It is mandatory to use UMEvent for dispatching to Commands. Commands
    * understand and "use" the optional "handlers" responder within the event 
    * 
    * <p>For more information on how event dispatching works in Cairngorm, 
    * please check with CairngormEventDispatcher.</p>
    *
    * <p>For more information on how event dispatching works uniquely with Commands, 
    * please check with Command.</p>
    *
    * <p>
    * Events are typically broadcast as the result of a user gesture occuring
    * in the application, such as a button click, a menu selection, a double
    * click, a drag and drop operation, etc.  
    * </p>
    *
    * @see com.universalmind.cairngorm.controller.CairngormEventDispatcher
    * @see com.universalmind.cairngorm.commands.Command
    */	
    public class AnnounceFaultEvent extends UMEvent
    {
        static public const EVENT_ID : String = "announceFaultEvent";

	      /**
	       * The fault data that was generated during an asynchronous response or manually.
	       */
	   	  	public var fault : Fault = null;

	      /**
	       * Constructor, takes the fault data that should be deliver with the event
	       * 
	       * @param fault  This is the actual Fault instance [usually generated by an asynchronous response FaultEvent]
	       */
			public function AnnounceFaultEvent(	fault : Fault ) {
											
				super(EVENT_ID);				
				this.fault = fault;
			}

			/**
			  * Per Adobe Flex recommendations all events should support a clone() operation for bubbling and dispatching purposes
			  * 
			  */ 			
			override public function clone():Event {
				return new AnnounceFaultEvent(this.fault).copyFrom(this);
			}
			
			/**
			  * Utility method to allow quick initialization of an event based on current settings from another event. 
			  * Also used to implement the clone() method functionality
			  * 
			  * @param src The event from which current settings and references should be copied.
			  */
			override public function copyFrom(src : Event):Event {					
				// Note: can change/specify the values of type,bubbles,etc...
				// during at construction only.
				
				// Note the callbacks is copied by REFERENCE 
				if (src is AnnounceFaultEvent)   this.fault = (src as AnnounceFaultEvent).fault;
							
				return super.copyFrom(src);
			}
	}
}